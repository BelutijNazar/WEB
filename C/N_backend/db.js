// my-chat-backend/db.js

// 1. Загружаем переменные окружения из .env файла.
// Это гарантирует, что process.env.DATABASE_URL будет доступен,
// даже если dotenv.config() не был вызван ранее в главном файле приложения.
// Если он уже был вызван, повторный вызов не навредит (dotenv это обрабатывает).
require('dotenv').config();

const { Pool } = require('pg');

// 2. Проверяем, что DATABASE_URL действительно загружен из .env или окружения.
// Это важный шаг для отладки и предотвращения неожиданных ошибок.
if (!process.env.DATABASE_URL) {
    console.error("---------------------------------------------------------------------------");
    console.error("ОШИБКА: Переменная окружения DATABASE_URL не установлена!");
    console.error("Пожалуйста, убедитесь, что у вас есть файл .env в корне проекта");
    console.error("и он содержит строку вида: DATABASE_URL=\"postgresql://user:password@host:port/database\"");
    console.error("Или что эта переменная установлена в вашем окружении развертывания.");
    console.error("---------------------------------------------------------------------------");
    // Завершаем приложение, так как без подключения к БД оно не сможет корректно работать.
    // В реальном приложении можно реализовать более сложную логику обработки ошибок.
    process.exit(1);
}

// Для отладки: выводим используемую строку подключения (можно закомментировать в продакшене)
// Осторожно: не выводите это в логи, если строка содержит реальный пароль в открытом виде и логи публичны.
// В вашем случае DATABASE_URL уже содержит пароль.
// console.log(`[DB] Используется DATABASE_URL: ${process.env.DATABASE_URL.replace(/:[^:]+@/, ':<password>@')}`); // Скрываем пароль для лога

// 3. Создаем новый пул соединений PostgreSQL
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' 
        ? { rejectUnauthorized: false } // Для многих облачных провайдеров это необходимо
        : false // Для локальной разработки SSL обычно не нужен
});

// Добавим обработчики событий для пула для лучшей диагностики (опционально, но полезно)
pool.on('connect', (client) => {
    // Можно получить IP клиента, если это полезно для логов
    // const clientAddress = client.connectionParameters.host + ':' + client.connectionParameters.port;
    console.log('[DB] Клиент успешно подключился к PostgreSQL.');
});

pool.on('error', (err, client) => {
    console.error('[DB] Неожиданная ошибка на неактивном клиенте (idle client):', err);
    // В зависимости от критичности ошибки, можно решить, нужно ли перезапускать приложение
    // process.exit(-1); // Раскомментируйте, если хотите завершать приложение при ошибках пула
});

// 4. Экспортируем объект с методом query для выполнения запросов
// Это наиболее частый способ использования.
module.exports = {
    query: (text, params) => pool.query(text, params),

    // Опционально: экспортируем функцию для получения клиента из пула.
    // Это нужно, если вы хотите выполнять несколько операций в рамках одной транзакции.
    // Пример использования:
    // const client = await db.getClient();
    // try {
    //   await client.query('BEGIN');
    //   // ... ваши запросы
    //   await client.query('COMMIT');
    // } catch (e) {
    //   await client.query('ROLLBACK');
    //   throw e;
    // } finally {
    //   client.release();
    // }
    getClient: () => pool.connect(),
    

    
    // Опционально: экспортируем сам пул, если нужны более низкоуровневые операции или его закрытие.
    // pool: pool // Обычно не требуется экспортировать весь пул напрямую.
};
