{"ast":null,"code":"// routes/auth.js\nrouter.post('/register', async (req, res) => {\n  const {\n    nickname,\n    password\n  } = req.body;\n  if (!nickname || !password) {\n    return res.status(400).json({\n      message: 'Никнейм и пароль обязательны.'\n    });\n  }\n  try {\n    // --- Добавлена проверка на существование никнейма в БД ---\n    const existingUser = await db.query('SELECT * FROM users WHERE nickname = $1', [nickname]);\n    if (existingUser.rows.length > 0) {\n      return res.status(409).json({\n        message: 'Пользователь с таким никнеймом уже существует.'\n      });\n    }\n    // --- Конец добавленной проверки ---\n\n    const salt = await bcrypt.genSalt(10);\n    const passwordHash = await bcrypt.hash(password, salt);\n    const newUser = await db.query('INSERT INTO users (nickname, password_hash) VALUES ($1, $2) RETURNING id, nickname', [nickname, passwordHash]);\n    res.status(201).json({\n      message: 'Регистрация успешна!',\n      user: newUser.rows[0]\n    });\n  } catch (error) {\n    console.error('Ошибка регистрации:', error);\n    res.status(500).json({\n      message: 'Произошла ошибка при регистрации.'\n    });\n  }\n});","map":{"version":3,"names":["router","post","req","res","nickname","password","body","status","json","message","existingUser","db","query","rows","length","salt","bcrypt","genSalt","passwordHash","hash","newUser","user","error","console"],"sources":["D:/Git/WEB/WEB/C/validation_enter.js"],"sourcesContent":["// routes/auth.js\r\nrouter.post('/register', async (req, res) => {\r\n    const { nickname, password } = req.body;\r\n\r\n    if (!nickname || !password) {\r\n        return res.status(400).json({ message: 'Никнейм и пароль обязательны.' });\r\n    }\r\n\r\n    try {\r\n        // --- Добавлена проверка на существование никнейма в БД ---\r\n        const existingUser = await db.query('SELECT * FROM users WHERE nickname = $1', [nickname]);\r\n        if (existingUser.rows.length > 0) {\r\n            return res.status(409).json({ message: 'Пользователь с таким никнеймом уже существует.' });\r\n        }\r\n        // --- Конец добавленной проверки ---\r\n\r\n        const salt = await bcrypt.genSalt(10);\r\n        const passwordHash = await bcrypt.hash(password, salt);\r\n\r\n        const newUser = await db.query(\r\n            'INSERT INTO users (nickname, password_hash) VALUES ($1, $2) RETURNING id, nickname',\r\n            [nickname, passwordHash]\r\n        );\r\n\r\n        res.status(201).json({ message: 'Регистрация успешна!', user: newUser.rows[0] });\r\n\r\n    } catch (error) {\r\n        console.error('Ошибка регистрации:', error);\r\n        res.status(500).json({ message: 'Произошла ошибка при регистрации.' });\r\n    }\r\n});"],"mappings":"AAAA;AACAA,MAAM,CAACC,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;IACxB,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC;EAC7E;EAEA,IAAI;IACA;IACA,MAAMC,YAAY,GAAG,MAAMC,EAAE,CAACC,KAAK,CAAC,yCAAyC,EAAE,CAACR,QAAQ,CAAC,CAAC;IAC1F,IAAIM,YAAY,CAACG,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAC9B,OAAOX,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiD,CAAC,CAAC;IAC9F;IACA;;IAEA,MAAMM,IAAI,GAAG,MAAMC,MAAM,CAACC,OAAO,CAAC,EAAE,CAAC;IACrC,MAAMC,YAAY,GAAG,MAAMF,MAAM,CAACG,IAAI,CAACd,QAAQ,EAAEU,IAAI,CAAC;IAEtD,MAAMK,OAAO,GAAG,MAAMT,EAAE,CAACC,KAAK,CAC1B,oFAAoF,EACpF,CAACR,QAAQ,EAAEc,YAAY,CAC3B,CAAC;IAEDf,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,sBAAsB;MAAEY,IAAI,EAAED,OAAO,CAACP,IAAI,CAAC,CAAC;IAAE,CAAC,CAAC;EAEpF,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CnB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAoC,CAAC,CAAC;EAC1E;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}