{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"reg-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"form-container\"\n};\nconst _hoisted_3 = {\n  class: \"error-message\"\n};\nconst _hoisted_4 = {\n  class: \"error-message\"\n};\nconst _hoisted_5 = {\n  class: \"error-message\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"error-message general-error\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  class: \"success-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    class: \"label\"\n  }, \"Login\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.nickname = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.clearErrors && $options.clearErrors(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.nickname]]), _createElementVNode(\"div\", _hoisted_3, _toDisplayString($data.nicknameError), 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    class: \"label\"\n  }, \"Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.clearErrors && $options.clearErrors(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.password]]), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($data.passwordError), 1 /* TEXT */), _cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    class: \"label\"\n  }, \"Password Check\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.confirmPassword = $event),\n    onInput: _cache[5] || (_cache[5] = (...args) => $options.clearErrors && $options.clearErrors(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.confirmPassword]]), _createElementVNode(\"div\", _hoisted_5, _toDisplayString($data.confirmPasswordError), 1 /* TEXT */), $data.generalError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString($data.generalError), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.successMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _toDisplayString($data.successMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    class: \"btn\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.register && $options.register(...args))\n  }, \"Registration\"), _createVNode(_component_router_link, {\n    to: \"/log\",\n    class: \"link\"\n  }, {\n    default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\"Already have an account?\")])),\n    _: 1 /* STABLE */,\n    __: [7]\n  })])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","type","_cache","$event","$data","nickname","onInput","args","$options","clearErrors","_hoisted_3","_toDisplayString","nicknameError","password","_hoisted_4","passwordError","confirmPassword","_hoisted_5","confirmPasswordError","generalError","_hoisted_6","_createCommentVNode","successMessage","_hoisted_7","onClick","register","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_","__"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\RegistrationPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"reg-wrapper\">\r\n    <div class=\"form-container\">\r\n      <label class=\"label\">Login</label>\r\n      <input type=\"text\" class=\"input\" v-model=\"nickname\" @input=\"clearErrors\" />\r\n      <div class=\"error-message\">{{ nicknameError }}</div>\r\n\r\n      <label class=\"label\">Password</label>\r\n      <input type=\"password\" class=\"input\" v-model=\"password\" @input=\"clearErrors\" />\r\n      <div class=\"error-message\">{{ passwordError }}</div>\r\n\r\n      <label class=\"label\">Password Check</label>\r\n      <input type=\"password\" class=\"input\" v-model=\"confirmPassword\" @input=\"clearErrors\" />\r\n      <div class=\"error-message\">{{ confirmPasswordError }}</div>\r\n\r\n      <div v-if=\"generalError\" class=\"error-message general-error\">{{ generalError }}</div>\r\n      <div v-if=\"successMessage\" class=\"success-message\">{{ successMessage }}</div>\r\n\r\n\r\n      <button class=\"btn\" @click=\"register\">Registration</button>\r\n\r\n      <router-link to=\"/log\" class=\"link\">Already have an account?</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Импортируем функции валидации из правильного пути.\r\n// Предполагаем, что ваш файл валидации называется validation_register.js\r\n// и находится в WEB/C/.\r\nimport { validatePassword, validateConfirmPassword } from '..\\..\\..\\C\\validation_register';\r\n\r\nexport default {\r\n  name: 'RegistrationPage',\r\n  data() {\r\n    return {\r\n      nickname: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      nicknameError: '',\r\n      passwordError: '',\r\n      confirmPasswordError: '',\r\n      generalError: '', // Для ошибок от сервера или сети\r\n      successMessage: '' // Для сообщения об успешной регистрации\r\n    };\r\n  },\r\n  methods: {\r\n    clearErrors() {\r\n      // Сбрасываем все сообщения об ошибках при любом изменении ввода\r\n      this.nicknameError = '';\r\n      this.passwordError = '';\r\n      this.confirmPasswordError = '';\r\n      this.generalError = '';\r\n      this.successMessage = '';\r\n    },\r\n\r\n    async register() {\r\n      this.clearErrors(); // Очищаем предыдущие ошибки перед новой попыткой регистрации\r\n\r\n      let isValid = true;\r\n\r\n      // 1. Клиентская валидация никнейма (просто проверяем, что не пустой)\r\n      if (!this.nickname.trim()) { // Используем .trim() для удаления пробелов по краям\r\n        this.nicknameError = 'Login не может быть пустым.';\r\n        isValid = false;\r\n      }\r\n\r\n      // 2. Клиентская валидация Пароля\r\n      const passwordValidationResult = validatePassword(this.password);\r\n      if (passwordValidationResult) {\r\n        this.passwordError = passwordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      // 3. Клиентская валидация Подтверждения Пароля\r\n      const confirmPasswordValidationResult = validateConfirmPassword(this.password, this.confirmPassword);\r\n      if (confirmPasswordValidationResult) {\r\n        this.confirmPasswordError = confirmPasswordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      // Если есть ошибки клиентской валидации, прерываем выполнение\r\n      if (!isValid) {\r\n        console.log('Форма содержит ошибки клиентской валидации.');\r\n        return;\r\n      }\r\n\r\n      // Если клиентская валидация прошла успешно, отправляем запрос на бэкенд\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/auth/register', { // URL вашего бэкенд API\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ nickname: this.nickname, password: this.password })\r\n        });\r\n\r\n        const data = await response.json(); // Парсим JSON-ответ от сервера\r\n\r\n        if (response.ok) {\r\n          // Регистрация успешна (статус 201 Created)\r\n          console.log('Регистрация успешна:', data);\r\n          this.successMessage = data.message || 'Регистрация успешно выполнена!';\r\n\r\n          // Очищаем поля формы\r\n          this.nickname = '';\r\n          this.password = '';\r\n          this.confirmPassword = '';\r\n\r\n          // Перенаправляем пользователя на страницу входа через 2 секунды\r\n          setTimeout(() => {\r\n            this.$router.push('/log'); // Используем /log, так как у вас есть ссылка на нее\r\n          }, 2000);\r\n\r\n        } else {\r\n          // Если сервер вернул ошибку (например, 400 Bad Request, 409 Conflict, 500 Internal Server Error)\r\n          console.error('Ошибка регистрации:', data);\r\n          this.generalError = data.message || 'Произошла ошибка при регистрации. Пожалуйста, попробуйте еще раз.';\r\n        }\r\n      } catch (error) {\r\n        // Обработка ошибок сети или других непредвиденных исключений\r\n        console.error('Произошла ошибка сети или другое исключение:', error);\r\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение.';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* Ваши существующие стили */\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.reg-wrapper {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: 'Abel', sans-serif;\r\n  padding: 20px;\r\n  background-color: #333; /* Добавлен темный фон для всего wrapper-а */\r\n  color: #eee; /* Цвет текста по умолчанию */\r\n}\r\n\r\n.form-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background-color: #222; /* Темнее фон для контейнера формы */\r\n  padding: 30px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.label {\r\n  color: #eee; /* Более светлый цвет для меток */\r\n  font-size: 1rem;\r\n  text-align: left;\r\n  margin-bottom: -10px; /* Чтобы уменьшить расстояние между label и input */\r\n}\r\n\r\n.input {\r\n  background-color: #444; /* Темнее фон для инпутов */\r\n  border: 1px solid #666; /* Более мягкая обводка */\r\n  border-radius: 10px;\r\n  padding: 12px 15px;\r\n  color: #fff; /* Белый текст в инпутах */\r\n  font-size: 1rem;\r\n}\r\n\r\n.input::placeholder {\r\n  color: #aaa; /* Цвет плейсхолдера */\r\n}\r\n\r\n.btn {\r\n  background-color: #556B8D; /* Немного измененный цвет кнопки */\r\n  color: #FFFF;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin-top: 10px; /* Отступ сверху для кнопки */\r\n}\r\n\r\n.btn:hover {\r\n  background-color: #42566C; /* Более темный цвет при наведении */\r\n}\r\n\r\n.link {\r\n  color: #9EC0F0; /* Измененный цвет ссылки для лучшей читаемости на темном фоне */\r\n  text-align: center;\r\n  text-decoration: none; /* Убираем подчеркивание */\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Стили для сообщений об ошибках */\r\n.error-message {\r\n  color: #ff6b6b; /* Ярко-красный цвет для ошибок */\r\n  font-size: 0.8em;\r\n  margin-top: -10px; /* Поднимаем сообщение ближе к полю ввода */\r\n  min-height: 1.2em; /* Чтобы высота элемента не скакала */\r\n}\r\n\r\n.general-error {\r\n  text-align: center;\r\n  color: #ff6b6b;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.success-message {\r\n  text-align: center;\r\n  color: #6bff96; /* Зеленый цвет для успешных сообщений */\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAgB;;EAGpBA,KAAK,EAAC;AAAe;;EAIrBA,KAAK,EAAC;AAAe;;EAIrBA,KAAK,EAAC;AAAe;;EAbhCC,GAAA;EAe+BD,KAAK,EAAC;;;EAfrCC,GAAA;EAgBiCD,KAAK,EAAC;;;;uBAfrCE,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,mBAAA,CAoBM,OApBNC,UAoBM,G,0BAnBJD,mBAAA,CAAkC;IAA3BJ,KAAK,EAAC;EAAO,GAAC,OAAK,sB,gBAC1BI,mBAAA,CAA2E;IAApEE,IAAI,EAAC,MAAM;IAACN,KAAK,EAAC,OAAO;IAJtC,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIgDC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;iEAA7BH,KAAA,CAAAC,QAAQ,E,GAClDN,mBAAA,CAAoD,OAApDW,UAAoD,EAAAC,gBAAA,CAAtBP,KAAA,CAAAQ,aAAa,kB,0BAE3Cb,mBAAA,CAAqC;IAA9BJ,KAAK,EAAC;EAAO,GAAC,UAAQ,sB,gBAC7BI,mBAAA,CAA+E;IAAxEE,IAAI,EAAC,UAAU;IAACN,KAAK,EAAC,OAAO;IAR1C,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQoDC,KAAA,CAAAS,QAAQ,GAAAV,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;iEAA7BH,KAAA,CAAAS,QAAQ,E,GACtDd,mBAAA,CAAoD,OAApDe,UAAoD,EAAAH,gBAAA,CAAtBP,KAAA,CAAAW,aAAa,kB,4BAE3ChB,mBAAA,CAA2C;IAApCJ,KAAK,EAAC;EAAO,GAAC,gBAAc,sB,gBACnCI,mBAAA,CAAsF;IAA/EE,IAAI,EAAC,UAAU;IAACN,KAAK,EAAC,OAAO;IAZ1C,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAYoDC,KAAA,CAAAY,eAAe,GAAAb,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;iEAApCH,KAAA,CAAAY,eAAe,E,GAC7DjB,mBAAA,CAA2D,OAA3DkB,UAA2D,EAAAN,gBAAA,CAA7BP,KAAA,CAAAc,oBAAoB,kBAEvCd,KAAA,CAAAe,YAAY,I,cAAvBtB,mBAAA,CAAqF,OAArFuB,UAAqF,EAAAT,gBAAA,CAArBP,KAAA,CAAAe,YAAY,oBAflFE,mBAAA,gBAgBiBjB,KAAA,CAAAkB,cAAc,I,cAAzBzB,mBAAA,CAA6E,OAA7E0B,UAA6E,EAAAZ,gBAAA,CAAvBP,KAAA,CAAAkB,cAAc,oBAhB1ED,mBAAA,gBAmBMtB,mBAAA,CAA2D;IAAnDJ,KAAK,EAAC,KAAK;IAAE6B,OAAK,EAAAtB,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAiB,QAAA,IAAAjB,QAAA,CAAAiB,QAAA,IAAAlB,IAAA,CAAQ;KAAE,cAAY,GAElDmB,YAAA,CAA0EC,sBAAA;IAA7DC,EAAE,EAAC,MAAM;IAACjC,KAAK,EAAC;;IArBnCkC,OAAA,EAAAC,QAAA,CAqB0C,MAAwB5B,MAAA,QAAAA,MAAA,OArBlE6B,gBAAA,CAqB0C,0BAAwB,E;IArBlEC,CAAA;IAAAC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}