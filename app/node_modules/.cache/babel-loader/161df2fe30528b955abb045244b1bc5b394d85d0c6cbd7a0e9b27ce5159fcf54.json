{"ast":null,"code":"// Импортируем функции валидации\nimport { validatePassword, validateConfirmPassword } from '../../../C/validation_reg';\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      nickname: '',\n      password: '',\n      confirmPassword: '',\n      nicknameError: '',\n      passwordError: '',\n      confirmPasswordError: '',\n      generalError: '' // Для ошибок, пришедших от сервера\n    };\n  },\n  methods: {\n    // Метод для очистки всех ошибок при вводе\n    clearErrors() {\n      this.nicknameError = '';\n      this.passwordError = '';\n      this.confirmPasswordError = '';\n      this.generalError = '';\n    },\n    async register() {\n      this.clearErrors(); // Сбрасываем все ошибки перед новой валидацией\n\n      let isValid = true;\n\n      // 1. Клиентская валидация никнейма (просто проверяем, что не пустой)\n      if (!this.nickname) {\n        this.nicknameError = 'Никнейм не может быть пустым.';\n        isValid = false;\n      }\n\n      // 2. Клиентская валидация Пароля\n      const passwordValidationResult = validatePassword(this.password);\n      if (passwordValidationResult) {\n        this.passwordError = passwordValidationResult;\n        isValid = false;\n      }\n\n      // 3. Клиентская валидация Подтверждения Пароля\n      const confirmPasswordValidationResult = validateConfirmPassword(this.password, this.confirmPassword);\n      if (confirmPasswordValidationResult) {\n        this.confirmPasswordError = confirmPasswordValidationResult;\n        isValid = false;\n      }\n      if (!isValid) {\n        // Если есть ошибки клиентской валидации, прекращаем выполнение\n        console.log('Форма содержит ошибки клиентской валидации.');\n        return;\n      }\n\n      // Если клиентская валидация прошла, отправляем запрос на сервер\n      try {\n        const response = await fetch('http://localhost:3000/api/auth/register', {\n          // <--- URL вашего бэкенд API\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            nickname: this.nickname,\n            password: this.password\n          })\n        });\n        const data = await response.json(); // Парсим JSON-ответ от сервера\n\n        if (response.ok) {\n          // Запрос успешен (статус 2xx)\n          console.log('Регистрация успешна:', data);\n          alert('Регистрация успешно выполнена!');\n          // Очищаем поля после успешной регистрации\n          this.nickname = '';\n          this.password = '';\n          this.confirmPassword = '';\n          // Можно перенаправить пользователя на страницу входа\n          // this.$router.push('/login');\n        } else {\n          // Запрос не успешен (например, статус 400, 409, 500)\n          console.error('Ошибка регистрации:', data);\n          // Отображаем ошибку от сервера\n          this.generalError = data.message || 'Произошла ошибка при регистрации. Пожалуйста, попробуйте еще раз.';\n        }\n      } catch (error) {\n        // Обработка ошибок сети или других непредвиденных ошибок\n        console.error('Произошла ошибка сети или другое исключение:', error);\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["validatePassword","validateConfirmPassword","name","data","nickname","password","confirmPassword","nicknameError","passwordError","confirmPasswordError","generalError","methods","clearErrors","register","isValid","passwordValidationResult","confirmPasswordValidationResult","console","log","response","fetch","method","headers","body","JSON","stringify","json","ok","alert","error","message"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\RegistrationPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"reg-wrapper\">\r\n   \r\n    <div class=\"form-container\">\r\n      <label class=\"label\">Login</label>\r\n      <input type=\"text\" class=\"input\" />\r\n\r\n      <label class=\"label\">Password</label>\r\n      <input type=\"password\" class=\"input\" />\r\n\r\n      <label class=\"label\">Password Check</label>\r\n      <input type=\"password\" class=\"input\" />\r\n\r\n      <router-link to=\"/chat\" class=\"full-width-link\">\r\n        <button class=\"btn\">Registration</button>\r\n      </router-link>\r\n      \r\n      <router-link to =\"/log\" class=\"link\">Already have an account?</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n// Импортируем функции валидации\r\nimport { validatePassword, validateConfirmPassword } from '../../../C/validation_reg';\r\n\r\n\r\nexport default {\r\n  name: 'RegisterPage',\r\n  data() {\r\n    return {\r\n      nickname: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      nicknameError: '',\r\n      passwordError: '',\r\n      confirmPasswordError: '',\r\n      generalError: '' // Для ошибок, пришедших от сервера\r\n    };\r\n  },\r\n  methods: {\r\n    // Метод для очистки всех ошибок при вводе\r\n    clearErrors() {\r\n      this.nicknameError = '';\r\n      this.passwordError = '';\r\n      this.confirmPasswordError = '';\r\n      this.generalError = '';\r\n    },\r\n\r\n    async register() {\r\n      this.clearErrors(); // Сбрасываем все ошибки перед новой валидацией\r\n\r\n      let isValid = true;\r\n\r\n      // 1. Клиентская валидация никнейма (просто проверяем, что не пустой)\r\n      if (!this.nickname) {\r\n        this.nicknameError = 'Никнейм не может быть пустым.';\r\n        isValid = false;\r\n      }\r\n\r\n      // 2. Клиентская валидация Пароля\r\n      const passwordValidationResult = validatePassword(this.password);\r\n      if (passwordValidationResult) {\r\n        this.passwordError = passwordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      // 3. Клиентская валидация Подтверждения Пароля\r\n      const confirmPasswordValidationResult = validateConfirmPassword(this.password, this.confirmPassword);\r\n      if (confirmPasswordValidationResult) {\r\n        this.confirmPasswordError = confirmPasswordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      if (!isValid) {\r\n        // Если есть ошибки клиентской валидации, прекращаем выполнение\r\n        console.log('Форма содержит ошибки клиентской валидации.');\r\n        return;\r\n      }\r\n\r\n      // Если клиентская валидация прошла, отправляем запрос на сервер\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/auth/register', { // <--- URL вашего бэкенд API\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ nickname: this.nickname, password: this.password })\r\n        });\r\n\r\n        const data = await response.json(); // Парсим JSON-ответ от сервера\r\n\r\n        if (response.ok) {\r\n          // Запрос успешен (статус 2xx)\r\n          console.log('Регистрация успешна:', data);\r\n          alert('Регистрация успешно выполнена!');\r\n          // Очищаем поля после успешной регистрации\r\n          this.nickname = '';\r\n          this.password = '';\r\n          this.confirmPassword = '';\r\n          // Можно перенаправить пользователя на страницу входа\r\n          // this.$router.push('/login');\r\n        } else {\r\n          // Запрос не успешен (например, статус 400, 409, 500)\r\n          console.error('Ошибка регистрации:', data);\r\n          // Отображаем ошибку от сервера\r\n          this.generalError = data.message || 'Произошла ошибка при регистрации. Пожалуйста, попробуйте еще раз.';\r\n        }\r\n      } catch (error) {\r\n        // Обработка ошибок сети или других непредвиденных ошибок\r\n        console.error('Произошла ошибка сети или другое исключение:', error);\r\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение.';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.reg-wrapper {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; \r\n  align-items: center;     \r\n  font-family: 'Abel', sans-serif;\r\n  padding: 20px; \r\n}\r\n\r\n.form-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.label {\r\n  color: white;\r\n  font-size: 1rem;\r\n  text-align: left;\r\n}\r\n\r\n.input {\r\n  background-color: transparent;\r\n  border: 1px solid #818182;\r\n  border-radius: 10px;\r\n  padding: 10px 15px;\r\n  color: #818182;\r\n  font-size: 1rem;\r\n}\r\n\r\n.btn {\r\n  background-color: #42566C;\r\n  color: #FFFF;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n.link{\r\n  color:#ffff;\r\n  text-align: center;\r\n}\r\n\r\n</style>\r\n"],"mappings":"AAwBA;AACA,SAASA,gBAAgB,EAAEC,uBAAsB,QAAS,2BAA2B;AAGrF,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,EAAE;MACjBC,oBAAoB,EAAE,EAAE;MACxBC,YAAY,EAAE,EAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACL,aAAY,GAAI,EAAE;MACvB,IAAI,CAACC,aAAY,GAAI,EAAE;MACvB,IAAI,CAACC,oBAAmB,GAAI,EAAE;MAC9B,IAAI,CAACC,YAAW,GAAI,EAAE;IACxB,CAAC;IAED,MAAMG,QAAQA,CAAA,EAAG;MACf,IAAI,CAACD,WAAW,CAAC,CAAC,EAAE;;MAEpB,IAAIE,OAAM,GAAI,IAAI;;MAElB;MACA,IAAI,CAAC,IAAI,CAACV,QAAQ,EAAE;QAClB,IAAI,CAACG,aAAY,GAAI,+BAA+B;QACpDO,OAAM,GAAI,KAAK;MACjB;;MAEA;MACA,MAAMC,wBAAuB,GAAIf,gBAAgB,CAAC,IAAI,CAACK,QAAQ,CAAC;MAChE,IAAIU,wBAAwB,EAAE;QAC5B,IAAI,CAACP,aAAY,GAAIO,wBAAwB;QAC7CD,OAAM,GAAI,KAAK;MACjB;;MAEA;MACA,MAAME,+BAA8B,GAAIf,uBAAuB,CAAC,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACC,eAAe,CAAC;MACpG,IAAIU,+BAA+B,EAAE;QACnC,IAAI,CAACP,oBAAmB,GAAIO,+BAA+B;QAC3DF,OAAM,GAAI,KAAK;MACjB;MAEA,IAAI,CAACA,OAAO,EAAE;QACZ;QACAG,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;QAC1D;MACF;;MAEA;MACA,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,yCAAyC,EAAE;UAAE;UACxEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAErB,QAAQ,EAAE,IAAI,CAACA,QAAQ;YAAEC,QAAQ,EAAE,IAAI,CAACA;UAAS,CAAC;QAC3E,CAAC,CAAC;QAEF,MAAMF,IAAG,GAAI,MAAMgB,QAAQ,CAACO,IAAI,CAAC,CAAC,EAAE;;QAEpC,IAAIP,QAAQ,CAACQ,EAAE,EAAE;UACf;UACAV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEf,IAAI,CAAC;UACzCyB,KAAK,CAAC,gCAAgC,CAAC;UACvC;UACA,IAAI,CAACxB,QAAO,GAAI,EAAE;UAClB,IAAI,CAACC,QAAO,GAAI,EAAE;UAClB,IAAI,CAACC,eAAc,GAAI,EAAE;UACzB;UACA;QACF,OAAO;UACL;UACAW,OAAO,CAACY,KAAK,CAAC,qBAAqB,EAAE1B,IAAI,CAAC;UAC1C;UACA,IAAI,CAACO,YAAW,GAAIP,IAAI,CAAC2B,OAAM,IAAK,mEAAmE;QACzG;MACF,EAAE,OAAOD,KAAK,EAAE;QACd;QACAZ,OAAO,CAACY,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;QACpE,IAAI,CAACnB,YAAW,GAAI,wEAAwE;MAC9F;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}