{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, resolveDirective as _resolveDirective, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-list-sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"user-list\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"loading-users\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"main-chat-area\"\n};\nconst _hoisted_8 = {\n  class: \"chat-header\"\n};\nconst _hoisted_9 = {\n  class: \"messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"no-chat-selected\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"timestamp\"\n};\nconst _hoisted_12 = [\"onClick\", \"onContextmenu\"];\nconst _hoisted_13 = {\n  class: \"edit-actions\"\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = [\"onClick\"];\nconst _hoisted_16 = {\n  class: \"input-area\"\n};\nconst _hoisted_17 = {\n  class: \"input-wrapper\"\n};\nconst _hoisted_18 = [\"disabled\"];\nconst _hoisted_19 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _directive_focus = _resolveDirective(\"focus\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    class: \"sidebar-header\"\n  }, [_createElementVNode(\"h3\", null, \"Chat Name\")], -1)), _createElementVNode(\"div\", _hoisted_3, [$data.users.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" Загрузка пользователей... \")) : (_openBlock(), _createElementBlock(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: user.id,\n      onClick: $event => $options.selectUser(user),\n      class: _normalizeClass({\n        'selected-user': $data.selectedUser && $data.selectedUser.id === user.id\n      })\n    }, _toDisplayString(user.nickname) + \" \" + _toDisplayString(user.id === $data.userId ? '(Вы)' : ''), 11, _hoisted_6);\n  }), 128))]))])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h2\", null, _toDisplayString($data.selectedUser ? $data.selectedUser.nickname : 'Выберите собеседника'), 1)]), _createElementVNode(\"div\", _hoisted_9, [!$data.selectedUser ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \" Пожалуйста, выберите собеседника, чтобы начать чат. \")) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($data.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id,\n      class: \"message-group\"\n    }, [$options.shouldShowTimestamp(msg.timestamp, index > 0 ? $data.messages[index - 1].timestamp : null) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString($options.formatTimestamp(msg.timestamp)), 1)) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", {\n      class: _normalizeClass(['message', msg.sender_id === $data.userId ? 'message--sent' : 'message--received']),\n      onClick: $event => msg.sender_id === $data.userId && $options.showContextMenu(msg, $event),\n      onContextmenu: _withModifiers($event => msg.sender_id === $data.userId && $options.showContextMenu(msg, $event), [\"prevent\"])\n    }, [$data.editingMessageId === msg.id ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.editingMessageText = $event),\n      onKeyup: [_cache[1] || (_cache[1] = _withKeys((...args) => $options.saveEditedMessage && $options.saveEditedMessage(...args), [\"enter\"])), _cache[2] || (_cache[2] = _withKeys((...args) => $options.cancelEditing && $options.cancelEditing(...args), [\"esc\"]))],\n      class: \"edit-input\"\n    }, null, 544), [[_vModelText, $data.editingMessageText], [_directive_focus]]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n      onClick: _cache[3] || (_cache[3] = (...args) => $options.saveEditedMessage && $options.saveEditedMessage(...args)),\n      class: \"save-button\"\n    }, \"Сохранить\"), _createElementVNode(\"button\", {\n      onClick: _cache[4] || (_cache[4] = (...args) => $options.cancelEditing && $options.cancelEditing(...args)),\n      class: \"cancel-button\"\n    }, \"Отмена\")])], 64)) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [_createTextVNode(_toDisplayString(msg.message), 1)], 64))], 42, _hoisted_12), $data.contextMenu.visible && $data.contextMenu.messageId === msg.id ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 1,\n      style: _normalizeStyle({\n        left: $data.contextMenu.x + 'px',\n        top: $data.contextMenu.y + 'px'\n      }),\n      class: \"message-context-menu\"\n    }, [_createElementVNode(\"div\", {\n      onClick: $event => $options.startEditing(msg)\n    }, \"Редактировать\", 8, _hoisted_14), _createElementVNode(\"div\", {\n      onClick: $event => $options.deleteMessage(msg.id)\n    }, \"Удалить\", 8, _hoisted_15)], 4)) : _createCommentVNode(\"\", true)]);\n  }), 128))], 512), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.message = $event),\n    type: \"text\",\n    placeholder: \"Type your message...\",\n    class: \"message-input\",\n    onKeyup: _cache[6] || (_cache[6] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    disabled: !$data.selectedUser\n  }, null, 40, _hoisted_18), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: !$data.selectedUser\n  }, null, 8, _hoisted_19)])])])]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","$data","users","length","_hoisted_4","_hoisted_5","_Fragment","_renderList","user","id","onClick","$event","$options","selectUser","_normalizeClass","selectedUser","nickname","_toDisplayString","userId","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","messages","msg","index","shouldShowTimestamp","timestamp","_hoisted_11","formatTimestamp","_createCommentVNode","sender_id","showContextMenu","onContextmenu","_withModifiers","editingMessageId","_cache","editingMessageText","onKeyup","_withKeys","args","saveEditedMessage","cancelEditing","_hoisted_13","_createTextVNode","message","_hoisted_12","contextMenu","visible","messageId","style","_normalizeStyle","left","x","top","y","startEditing","_hoisted_14","deleteMessage","_hoisted_15","_hoisted_16","_hoisted_17","type","placeholder","sendMessage","disabled","_hoisted_18","_hoisted_19"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <div class=\"user-list-sidebar\">\r\n      <div class=\"sidebar-header\">\r\n        <h3>Chat Name</h3>\r\n      </div>\r\n      <div class=\"user-list\">\r\n        <div v-if=\"users.length === 0\" class=\"loading-users\">\r\n          Загрузка пользователей...\r\n        </div>\r\n        <ul v-else>\r\n          <li\r\n            v-for=\"user in users\"\r\n            :key=\"user.id\"\r\n            @click=\"selectUser(user)\"\r\n            :class=\"{ 'selected-user': selectedUser && selectedUser.id === user.id }\"\r\n          >\r\n            {{ user.nickname }} {{ user.id === userId ? '(Вы)' : '' }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"main-chat-area\">\r\n      <div class=\"chat-header\">\r\n        <h2>{{ selectedUser ? selectedUser.nickname : 'Выберите собеседника' }}</h2>\r\n      </div>\r\n\r\n      <div class=\"messages\" ref=\"messagesContainer\">\r\n        <div v-if=\"!selectedUser\" class=\"no-chat-selected\">\r\n          Пожалуйста, выберите собеседника, чтобы начать чат.\r\n        </div>\r\n        <template v-else>\r\n          <div v-for=\"(msg, index) in messages\" :key=\"msg.id\" class=\"message-group\">\r\n            <div\r\n              v-if=\"shouldShowTimestamp(msg.timestamp, index > 0 ? messages[index - 1].timestamp : null)\"\r\n              class=\"timestamp\"\r\n            >\r\n              {{ formatTimestamp(msg.timestamp) }}\r\n            </div>\r\n            <div :class=\"['message', msg.sender_id === userId ? 'message--sent' : 'message--received']\"\r\n                 @click=\"msg.sender_id === userId && showContextMenu(msg, $event)\"\r\n                 @contextmenu.prevent=\"msg.sender_id === userId && showContextMenu(msg, $event)\">\r\n              <template v-if=\"editingMessageId === msg.id\">\r\n                <input\r\n                  v-model=\"editingMessageText\"\r\n                  @keyup.enter=\"saveEditedMessage\"\r\n                  @keyup.esc=\"cancelEditing\"\r\n                  v-focus\r\n                  class=\"edit-input\"\r\n                />\r\n                <div class=\"edit-actions\">\r\n                  <button @click=\"saveEditedMessage\" class=\"save-button\">Сохранить</button>\r\n                  <button @click=\"cancelEditing\" class=\"cancel-button\">Отмена</button>\r\n                </div>\r\n              </template>\r\n              <template v-else>\r\n                {{ msg.message }}\r\n              </template>\r\n            </div>\r\n\r\n            <div v-if=\"contextMenu.visible && contextMenu.messageId === msg.id\"\r\n                 :style=\"{ left: contextMenu.x + 'px', top: contextMenu.y + 'px' }\"\r\n                 class=\"message-context-menu\">\r\n              <div @click=\"startEditing(msg)\">Редактировать</div>\r\n              <div @click=\"deleteMessage(msg.id)\">Удалить</div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n\r\n      <div class=\"input-area\">\r\n        <div class=\"input-wrapper\">\r\n          <input\r\n            v-model=\"message\"\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            class=\"message-input\"\r\n            @keyup.enter=\"sendMessage\"\r\n            :disabled=\"!selectedUser\"\r\n          />\r\n          <button class=\"send-button\" @click=\"sendMessage\" :disabled=\"!selectedUser\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { io } from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'ChatPage',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      message: '',\r\n      messages: [],\r\n      token: localStorage.getItem('chatToken') || '',\r\n      userId: localStorage.getItem('chatUserId') || null,\r\n      nickname: localStorage.getItem('chatNickname') || '',\r\n      users: [],\r\n      selectedUser: null,\r\n      editingMessageId: null, // ID сообщения, которое редактируется\r\n      editingMessageText: '', // Текст сообщения в поле редактирования\r\n      contextMenu: { // Для отображения контекстного меню\r\n        visible: false,\r\n        messageId: null,\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    };\r\n  },\r\n  directives: {\r\n    focus: { // Кастомная директива для автоматического фокуса на поле редактирования\r\n      mounted(el) {\r\n        el.focus();\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // Проверяем наличие токена и userId\r\n    if (!this.token || !this.userId) {\r\n      console.warn('Токен или ID пользователя отсутствуют. Перенаправление на страницу входа.');\r\n      this.$router.push('/log'); // Перенаправить на страницу входа\r\n      return; // Останавливаем выполнение, если нет токена/userId\r\n    }\r\n\r\n    this.connectSocket();\r\n    this.fetchUsers();\r\n    // Добавляем обработчик для закрытия контекстного меню при клике в любом месте\r\n    document.addEventListener('click', this.closeContextMenu);\r\n  },\r\n  beforeUnmount() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n    // Удаляем обработчик при уничтожении компонента\r\n    document.removeEventListener('click', this.closeContextMenu);\r\n  },\r\n  watch: {\r\n    selectedUser(newVal, oldVal) {\r\n      if (newVal && newVal.id !== (oldVal ? oldVal.id : null)) {\r\n        this.fetchMessages(newVal.id);\r\n        this.editingMessageId = null; // Сбрасываем редактирование при смене чата\r\n        this.contextMenu.visible = false; // Скрываем меню\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    connectSocket() {\r\n      this.socket = io('http://192.168.100.2:3000'); // Используем актуальный IP\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected:', this.socket.id);\r\n        if (this.token) {\r\n          this.socket.emit('authenticate', this.token);\r\n        }\r\n      });\r\n\r\n      this.socket.on('authenticated', (data) => {\r\n        console.log('Socket authenticated for user:', data.nickname);\r\n        this.userId = data.userId;\r\n        this.nickname = data.nickname;\r\n      });\r\n\r\n      this.socket.on('authentication_error', (data) => {\r\n        console.error('Socket authentication error:', data.message);\r\n        localStorage.removeItem('chatToken');\r\n        localStorage.removeItem('chatUserId');\r\n        localStorage.removeItem('chatNickname');\r\n        alert('Ошибка аутентификации. Пожалуйста, войдите снова.');\r\n        this.$router.push('/log');\r\n      });\r\n\r\n      this.socket.on('receive_message', (newMessage) => {\r\n        console.log('Получено сообщение:', newMessage);\r\n        if (\r\n            (newMessage.sender_id === this.userId && newMessage.receiver_id === this.selectedUser?.id) ||\r\n            (newMessage.sender_id === this.selectedUser?.id && newMessage.receiver_id === this.userId)\r\n        ) {\r\n          this.messages.push(newMessage);\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        }\r\n      });\r\n\r\n      this.socket.on('message_error', (error) => {\r\n        console.error('Message error:', error.message);\r\n        alert(`Ошибка сообщения: ${error.message}`);\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Socket disconnected');\r\n      });\r\n\r\n      this.socket.on('message_updated', (updatedMsg) => {\r\n        console.log('Сообщение обновлено через Socket.IO:', updatedMsg);\r\n        const index = this.messages.findIndex(m => m.id === updatedMsg.id);\r\n        if (index !== -1) {\r\n          if (\r\n              (updatedMsg.sender_id === this.userId && updatedMsg.receiver_id === this.selectedUser?.id) ||\r\n              (updatedMsg.sender_id === this.selectedUser?.id && updatedMsg.receiver_id === this.userId)\r\n          ) {\r\n              this.messages.splice(index, 1, updatedMsg);\r\n              this.$nextTick(() => {\r\n                  this.scrollToBottom();\r\n              });\r\n          }\r\n        }\r\n      });\r\n\r\n      this.socket.on('message_deleted', ({ messageId, senderId, receiverId }) => {\r\n        console.log('Сообщение удалено через Socket.IO:', messageId);\r\n        if (\r\n            (senderId === this.userId && receiverId === this.selectedUser?.id) ||\r\n            (senderId === this.selectedUser?.id && receiverId === this.userId)\r\n        ) {\r\n          this.messages = this.messages.filter(m => m.id !== messageId);\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    async fetchUsers() {\r\n      try {\r\n        const response = await fetch('http://192.168.100.2:3000/api/users', { // Используем актуальный IP\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n        if (response.ok) {\r\n          let fetchedUsers = await response.json();\r\n          this.users = fetchedUsers.filter(user => user.id !== this.userId);\r\n          if (this.users.length > 0 && !this.selectedUser) {\r\n              this.selectUser(this.users[0]); // Автоматический выбор первого пользователя\r\n          }\r\n        } else if (response.status === 401) {\r\n            console.error('Неавторизованный доступ к пользователям. Перенаправление на вход.');\r\n            localStorage.removeItem('chatToken');\r\n            localStorage.removeItem('chatUserId');\r\n            localStorage.removeItem('chatNickname');\r\n            this.$router.push('/log');\r\n        } else {\r\n          console.error('Failed to fetch users:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages(otherUserId) {\r\n      if (!otherUserId) return;\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${otherUserId}`, { // Используем актуальный IP\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n        if (response.ok) {\r\n          this.messages = await response.json();\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        } else if (response.status === 401) {\r\n            console.error('Неавторизованный доступ к сообщениям. Перенаправление на вход.');\r\n            localStorage.removeItem('chatToken');\r\n            localStorage.removeItem('chatUserId');\r\n            localStorage.removeItem('chatNickname');\r\n            this.$router.push('/log');\r\n        } else {\r\n          console.error('Failed to fetch messages:', response.statusText);\r\n          this.messages = [];\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n        this.messages = [];\r\n      }\r\n    },\r\n\r\n    sendMessage() {\r\n      if (this.message.trim() === '' || !this.socket || !this.selectedUser) {\r\n        return;\r\n      }\r\n\r\n      this.socket.emit('send_message', {\r\n        receiverId: this.selectedUser.id,\r\n        message: this.message.trim(),\r\n      });\r\n\r\n      this.message = '';\r\n    },\r\n\r\n    selectUser(user) {\r\n      this.selectedUser = user;\r\n      this.messages = [];\r\n    },\r\n\r\n    showContextMenu(message, event) {\r\n        if (message.sender_id !== this.userId) return;\r\n\r\n        this.contextMenu.messageId = message.id;\r\n        this.contextMenu.x = event.clientX;\r\n        this.contextMenu.y = event.clientY;\r\n        this.contextMenu.visible = true;\r\n\r\n        event.stopPropagation();\r\n    },\r\n    closeContextMenu() {\r\n        this.contextMenu.visible = false;\r\n        this.contextMenu.messageId = null;\r\n    },\r\n\r\n    startEditing(message) {\r\n      this.editingMessageId = message.id;\r\n      this.editingMessageText = message.message;\r\n      this.closeContextMenu();\r\n    },\r\n\r\n    async saveEditedMessage() {\r\n      if (this.editingMessageText.trim() === '') {\r\n        alert('Сообщение не может быть пустым.');\r\n        return;\r\n      }\r\n      if (!this.editingMessageId) {\r\n          console.error('Не выбран ID сообщения для редактирования.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${this.editingMessageId}`, { // Используем актуальный IP\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${this.token}`\r\n          },\r\n          body: JSON.stringify({ newMessageText: this.editingMessageText })\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Сообщение успешно отредактировано на сервере.');\r\n        } else {\r\n          const errorData = await response.json();\r\n          console.error('Ошибка при редактировании сообщения:', errorData.message);\r\n          alert(`Ошибка: ${errorData.message}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Network error during message edit:', error);\r\n        alert('Не удалось подключиться к серверу для редактирования сообщения.');\r\n      } finally {\r\n        this.cancelEditing();\r\n      }\r\n    },\r\n\r\n    cancelEditing() {\r\n      this.editingMessageId = null;\r\n      this.editingMessageText = '';\r\n    },\r\n\r\n    async deleteMessage(messageId) {\r\n      if (!confirm('Вы уверены, что хотите удалить это сообщение?')) {\r\n        return;\r\n      }\r\n      if (!messageId) {\r\n          console.error('Не выбран ID сообщения для удаления.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${messageId}`, { // Используем актуальный IP\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Сообщение успешно удалено на сервере.');\r\n        } else {\r\n          const errorData = await response.json();\r\n          console.error('Ошибка при удалении сообщения:', errorData.message);\r\n          alert(`Ошибка: ${errorData.message}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Network error during message delete:', error);\r\n        alert('Не удалось подключиться к серверу для удаления сообщения.');\r\n      } finally {\r\n        this.closeContextMenu();\r\n      }\r\n    },\r\n\r\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\r\n        if (!prevTimestamp) {\r\n            return true;\r\n        }\r\n\r\n        const current = new Date(currentTimestamp);\r\n        const prev = new Date(prevTimestamp);\r\n\r\n        if (current.toDateString() !== prev.toDateString()) {\r\n            return true;\r\n        }\r\n\r\n        const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\r\n\r\n        return diffMinutes >= 2 || current.getHours() !== prev.getHours();\r\n    },\r\n\r\n    formatTimestamp(timestamp) {\r\n        const now = new Date();\r\n        const messageDate = new Date(timestamp);\r\n\r\n        const isToday = now.toDateString() === messageDate.toDateString();\r\n\r\n        if (isToday) {\r\n            return messageDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            const options = {\r\n                day: 'numeric',\r\n                month: 'short',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n            };\r\n            return messageDate.toLocaleDateString('ru-RU', options)\r\n                               .replace(/\\./g, '')\r\n                               .replace(',', '')\r\n                               .trim();\r\n        }\r\n    },\r\n    scrollToBottom() {\r\n        const messagesContainer = this.$refs.messagesContainer;\r\n        if (messagesContainer) {\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');\r\n\r\n/* Основной контейнер чата */\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #4A5469;\r\n  font-family: 'Roboto', sans-serif;\r\n  overflow: hidden; /* Предотвращает прокрутку всего окна */\r\n}\r\n\r\n/* Левая панель - список пользователей */\r\n.user-list-sidebar {\r\n  width: 250px; /* Фиксированная ширина */\r\n  background-color: #4A5469;\r\n  border-right: 1px solid #4A5469;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: white;\r\n  overflow-y: auto; /* Прокрутка списка пользователей */\r\n  padding-bottom: 20px; /* Отступ снизу */\r\n}\r\n\r\n.sidebar-header {\r\n  padding: 10.8px;\r\n  background-color: #4A5469;\r\n  text-align: left;\r\n}\r\n\r\n.sidebar-header h3 {\r\n  margin: 0;\r\n  font-size: 1.2rem;\r\n  background-color: #4A5469;\r\n  color: white; /* Цвет \"Chat Name\" */\r\n}\r\n\r\n.user-list {\r\n  flex-grow: 1; /* Занимает все доступное пространство */\r\n  padding: 10px 0;\r\n}\r\n\r\n.user-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.user-list li {\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.user-list li:hover {\r\n  background-color: #4A5469;\r\n}\r\n\r\n.user-list li.selected-user {\r\n  background-color: #5A657D; /* Цвет выбранного пользователя */\r\n  font-weight: bold;\r\n}\r\n\r\n.loading-users {\r\n    padding: 20px;\r\n    text-align: center;\r\n    color: #ccc;\r\n}\r\n\r\n/* Основная область чата */\r\n.main-chat-area {\r\n  flex-grow: 1; /* Занимает все оставшееся пространство */\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #292F3F;\r\n  position: relative; /* Для правильного позиционирования input-area */\r\n}\r\n\r\n.chat-header {\r\n  height: 45px;\r\n  width: 100%;\r\n  background-color: #373E4E;\r\n  color: white;\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  box-sizing: border-box; /* Включает padding в высоту */\r\n}\r\n\r\n.chat-header h2 {\r\n  margin: 0;\r\n  background-color: #373e4e;\r\n  font-size: 1.3rem;\r\n  line-height: 1; /* Выравнивание по центру */\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 10px 20px;\r\n  box-sizing: border-box;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.no-chat-selected {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    color: #aaa;\r\n    font-size: 1.2rem;\r\n    text-align: center;\r\n}\r\n\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.timestamp {\r\n  color: #ffff;\r\n  font-size: 0.75rem;\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 20px;\r\n  word-break: break-word;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.message--received {\r\n  background-color: #373E4E;\r\n  align-self: flex-start;\r\n  color: white;\r\n}\r\n\r\n.message--sent {\r\n  background-color: #272A35;\r\n  align-self: flex-end;\r\n  color: white;\r\n}\r\n\r\n.edit-input {\r\n    width: calc(100% - 70px);\r\n    background-color: #4A5469;\r\n    border: 1px solid #6c7a89;\r\n    border-radius: 10px;\r\n    padding: 8px 12px;\r\n    color: white;\r\n    font-size: 0.95rem;\r\n    box-sizing: border-box;\r\n    margin-right: 5px;\r\n}\r\n\r\n.edit-actions {\r\n    display: flex;\r\n    gap: 5px;\r\n    margin-top: 5px;\r\n}\r\n\r\n.save-button, .cancel-button {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    padding: 5px 10px;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.cancel-button {\r\n    background-color: #f44336;\r\n}\r\n\r\n.message-context-menu {\r\n  position: absolute; /* Changed from fixed to absolute, positioned relative to .message-group */\r\n  background-color: #373E4E;\r\n  border: 1px solid #4A5469;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  padding: 5px 0;\r\n  /* Для того, чтобы меню появлялось рядом с сообщением, а не в верхнем левом углу страницы */\r\n  transform: translateX(10px); /* Небольшой сдвиг от сообщения */\r\n}\r\n\r\n/* Если меню появляется слишком далеко, можно добавить: */\r\n.message--sent + .message-context-menu {\r\n  right: 0; /* Выравнивает меню по правому краю для отправленных сообщений */\r\n  transform: translateX(-10px); /* Сдвигает влево */\r\n}\r\n\r\n.message-context-menu div {\r\n  padding: 8px 15px;\r\n  color: white;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n}\r\n\r\n.message-context-menu div:hover {\r\n  background-color: #4A5469;\r\n}\r\n\r\n.input-area {\r\n  position: absolute; /* Изменено с fixed на absolute */\r\n  bottom: 20px;\r\n  left: 20px; /* Отступ от левого края main-chat-area */\r\n  right: 20px; /* Отступ от правого края main-chat-area */\r\n  width: auto; /* Ширина определяется left/right */\r\n  max-width: none; /* Убираем max-width, т.к. ширина уже задана */\r\n  box-sizing: border-box;\r\n  background-color: #292F3F;\r\n  padding-top: 10px;\r\n  z-index: 10; /* Чтобы быть поверх сообщений */\r\n}\r\n\r\n.input-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.message-input {\r\n  width: 100%;\r\n  height: 45px;\r\n  background-color: #272A35;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 0 50px 0 15px;\r\n  color: white;\r\n  font-size: 1rem;\r\n  font-family: 'Roboto', sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.send-button {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 35px;\r\n  height: 35px;\r\n  background-color: #373E4E;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-size: 1.1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0;\r\n  background-image: url('@/assets/speech-bubble.svg'); /* Убедитесь, что этот путь верен */\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: 20px 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    flex-direction: column; /* На маленьких экранах делаем колонку */\r\n  }\r\n\r\n  .user-list-sidebar {\r\n    width: 100%;\r\n    height: 150px; /* Ограничиваем высоту на мобильных */\r\n    border-right: none;\r\n    border-bottom: 1px solid #4A5469;\r\n  }\r\n\r\n  .user-list {\r\n    display: flex; /* Делаем список пользователей горизонтальным прокручиваемым */\r\n    overflow-x: auto;\r\n    white-space: nowrap; /* Запрещаем перенос строк */\r\n  }\r\n\r\n  .user-list ul {\r\n    display: flex; /* Делаем элементы списка flex */\r\n    gap: 5px; /* Небольшой отступ между элементами */\r\n  }\r\n\r\n  .user-list li {\r\n    flex-shrink: 0; /* Не сжимаем элементы */\r\n    border-bottom: none;\r\n    border-right: 1px solid #373E4E; /* Добавляем разделитель между пользователями */\r\n  }\r\n\r\n  .main-chat-area {\r\n    width: 100%; /* Занимает всю ширину */\r\n    flex-grow: 1; /* Занимает оставшуюся высоту */\r\n  }\r\n\r\n  .messages {\r\n    padding-bottom: 80px; /* Корректируем отступ для инпута */\r\n  }\r\n\r\n  .input-area {\r\n    left: 10px;\r\n    right: 10px;\r\n    bottom: 10px;\r\n  }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .message {\r\n    font-size: 0.95rem;\r\n  }\r\n\r\n  .message-input {\r\n    height: 40px;\r\n    font-size: 0.95rem;\r\n    padding-right: 45px;\r\n  }\r\n\r\n  .send-button {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .user-list li {\r\n    padding: 8px 12px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}