{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-page\"\n};\nconst _hoisted_2 = {\n  class: \"messages\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"timestamp\"\n};\nconst _hoisted_4 = {\n  class: \"input-area\"\n};\nconst _hoisted_5 = {\n  class: \"input-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id,\n      class: \"message-group\"\n    }, [$options.shouldShowTimestamp(msg.timestamp, index > 0 ? $data.messages[index - 1].timestamp : null) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($options.formatTimestamp(msg.timestamp)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: _normalizeClass(['message', msg.isSent ? 'message--sent' : 'message--received'])\n    }, _toDisplayString(msg.text), 3 /* TEXT, CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.message = $event),\n    type: \"text\",\n    placeholder: \"Type your message...\",\n    class: \"message-input\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  })])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","msg","index","id","$options","shouldShowTimestamp","timestamp","_hoisted_3","_toDisplayString","formatTimestamp","_createCommentVNode","_normalizeClass","isSent","text","_hoisted_4","_hoisted_5","_cache","$event","message","type","placeholder","onKeyup","_withKeys","args","sendMessage","onClick"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-page\">\r\n    <div class=\"header\"></div>\r\n\r\n    <div class=\"messages\">\r\n      <div v-for=\"(msg, index) in messages\" :key=\"msg.id\" class=\"message-group\">\r\n        <div\r\n          v-if=\"shouldShowTimestamp(msg.timestamp, index > 0 ? messages[index - 1].timestamp : null)\"\r\n          class=\"timestamp\"\r\n        >\r\n          {{ formatTimestamp(msg.timestamp) }}\r\n        </div>\r\n        <div :class=\"['message', msg.isSent ? 'message--sent' : 'message--received']\">\r\n          {{ msg.text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"input-area\">\r\n      <div class=\"input-wrapper\">\r\n        <input\r\n          v-model=\"message\"\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          class=\"message-input\"\r\n          @keyup.enter=\"sendMessage\"\r\n        />\r\n        <button class=\"send-button\" @click=\"sendMessage\"></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatPage',\r\n  data() {\r\n    return {\r\n      message: '', \r\n      messages: [ \r\n        { id: 1, text: 'Привет! Как дела?', isSent: false, timestamp: new Date('2025-05-30T10:30:00') }, \r\n        { id: 2, text: 'Привет! Всё хорошо, спасибо 😊', isSent: true, timestamp: new Date('2025-05-31T12:05:00') }, \r\n        { id: 3, text: 'Чем занимаешься?', isSent: false, timestamp: new Date('2025-05-31T12:05:30') }, \r\n        { id: 4, text: 'Работаю над Vue проектом.', isSent: true, timestamp: new Date('2025-05-31T12:06:15') }, \r\n        { id: 5, text: 'Понятно.', isSent: false, timestamp: new Date('2025-05-31T12:06:45') }, \r\n        { id: 6, text: 'Как успехи?', isSent: true, timestamp: new Date() },\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\r\n      if (!prevTimestamp) {\r\n        return true;\r\n      }\r\n\r\n      const current = new Date(currentTimestamp);\r\n      const prev = new Date(prevTimestamp);\r\n\r\n      if (current.toDateString() !== prev.toDateString()) {\r\n        return true;\r\n      }\r\n\r\n      const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\r\n\r\n      return diffMinutes >= 2 || current.getHours() !== prev.getHours();\r\n    },\r\n\r\n    formatTimestamp(timestamp) {\r\n      const now = new Date();\r\n      const messageDate = new Date(timestamp);\r\n\r\n      const isToday = now.toDateString() === messageDate.toDateString();\r\n\r\n      if (isToday) {\r\n        return messageDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\r\n      } else {\r\n        const options = {\r\n          day: 'numeric',\r\n          month: 'short',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n        };\r\n        return messageDate.toLocaleDateString('ru-RU', options)\r\n                            .replace(/\\./g, '')\r\n                            .replace(',', '') \r\n                            .trim(); \r\n      }\r\n    },\r\n    sendMessage() {\r\n      if (this.message.trim() === '') {\r\n        return; \r\n      }\r\n\r\n      const newMessage = {\r\n        id: this.messages.length + 1,\r\n        text: this.message.trim(),\r\n        isSent: true,\r\n        timestamp: new Date(), \r\n      };\r\n\r\n      this.messages.push(newMessage);\r\n      this.message = '';\r\n      this.$nextTick(() => {\r\n        const messagesContainer = this.$el.querySelector('.messages');\r\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.chat-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 100vh;\r\n  background-color: #292F3F;\r\n  font-family: 'Roboto', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.header {\r\n  height: 45px;\r\n  width: 100%;\r\n  background-color: #292F3F;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 10px 20px 120px;\r\n  box-sizing: border-box;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n\r\n.timestamp {\r\n  color: #ffff;\r\n  font-size: 0.75rem;\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 20px;\r\n  word-break: break-word;\r\n  font-size: 1rem;\r\n}\r\n\r\n.message--received {\r\n  background-color: #373E4E;\r\n  align-self: flex-start;\r\n  color: white;\r\n}\r\n\r\n.message--sent {\r\n  background-color: #272A35;\r\n  align-self: flex-end;\r\n  color: white;\r\n}\r\n\r\n.input-area {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 90%;\r\n  max-width: 1000px;\r\n  box-sizing: border-box;\r\n  background-color: #292F3F;\r\n  padding-top: 10px;\r\n}\r\n\r\n.input-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.message-input {\r\n  width: 100%;\r\n  height: 45px;\r\n  background-color: #272A35;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 0 50px 0 15px;\r\n  color: white;\r\n  font-size: 1rem;\r\n  font-family: 'Roboto', sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.send-button {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 35px;\r\n  height: 35px;\r\n  background-color: #373E4E;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-size: 1.1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0;\r\n  background-image: url('@/assets/speech-bubble.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: 20px 20px;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .message {\r\n    font-size: 0.95rem;\r\n  }\r\n\r\n  .message-input {\r\n    height: 40px;\r\n    font-size: 0.95rem;\r\n    padding-right: 45px;\r\n  }\r\n\r\n  .send-button {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 1rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAGfA,KAAK,EAAC;AAAU;;EAJzBC,GAAA;EAQUD,KAAK,EAAC;;;EAUPA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAe;;uBAlB9BE,mBAAA,CA6BM,OA7BNC,UA6BM,G,0BA5BJC,mBAAA,CAA0B;IAArBJ,KAAK,EAAC;EAAQ,6BAEnBI,mBAAA,CAYM,OAZNC,UAYM,I,kBAXJH,mBAAA,CAUMI,SAAA,QAfZC,WAAA,CAKkCC,KAAA,CAAAC,QAAQ,EAL1C,CAKmBC,GAAG,EAAEC,KAAK;yBAAvBT,mBAAA,CAUM;MAViCD,GAAG,EAAES,GAAG,CAACE,EAAE;MAAEZ,KAAK,EAAC;QAEhDa,QAAA,CAAAC,mBAAmB,CAACJ,GAAG,CAACK,SAAS,EAAEJ,KAAK,OAAOH,KAAA,CAAAC,QAAQ,CAACE,KAAK,MAAMI,SAAS,Y,cADpFb,mBAAA,CAKM,OALNc,UAKM,EAAAC,gBAAA,CADDJ,QAAA,CAAAK,eAAe,CAACR,GAAG,CAACK,SAAS,qBAV1CI,mBAAA,gBAYQf,mBAAA,CAEM;MAFAJ,KAAK,EAZnBoB,eAAA,aAYiCV,GAAG,CAACW,MAAM;wBAC9BX,GAAG,CAACY,IAAI,wB;oCAKjBlB,mBAAA,CAWM,OAXNmB,UAWM,GAVJnB,mBAAA,CASM,OATNoB,UASM,G,gBARJpB,mBAAA,CAME;IA1BV,uBAAAqB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAqBmBlB,KAAA,CAAAmB,OAAO,GAAAD,MAAA;IAChBE,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,sBAAsB;IAClC7B,KAAK,EAAC,eAAe;IACpB8B,OAAK,EAAAL,MAAA,QAAAA,MAAA,MAzBhBM,SAAA,KAAAC,IAAA,KAyBwBnB,QAAA,CAAAoB,WAAA,IAAApB,QAAA,CAAAoB,WAAA,IAAAD,IAAA,CAAW;iEAJhBxB,KAAA,CAAAmB,OAAO,E,GAMlBvB,mBAAA,CAA0D;IAAlDJ,KAAK,EAAC,aAAa;IAAEkC,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEnB,QAAA,CAAAoB,WAAA,IAAApB,QAAA,CAAAoB,WAAA,IAAAD,IAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}