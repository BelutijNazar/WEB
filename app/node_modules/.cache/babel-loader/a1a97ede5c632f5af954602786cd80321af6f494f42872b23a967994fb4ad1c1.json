{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { io } from 'socket.io-client';\nexport default {\n  name: 'ChatPage',\n  data() {\n    return {\n      socket: null,\n      message: '',\n      messages: [],\n      token: localStorage.getItem('chatToken') || '',\n      userId: localStorage.getItem('chatUserId') || null,\n      nickname: localStorage.getItem('chatNickname') || '',\n      users: [],\n      selectedUser: null,\n      editingMessageId: null,\n      // ID сообщения, которое редактируется\n      editingMessageText: '',\n      // Текст сообщения в поле редактирования\n      contextMenu: {\n        // Для отображения контекстного меню\n        visible: false,\n        messageId: null,\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  directives: {\n    focus: {\n      // Кастомная директива для автоматического фокуса на поле редактирования\n      mounted(el) {\n        el.focus();\n      }\n    }\n  },\n  created() {\n    // Проверяем наличие токена и userId\n    if (!this.token || !this.userId) {\n      console.warn('Токен или ID пользователя отсутствуют. Перенаправление на страницу входа.');\n      this.$router.push('/log'); // Перенаправить на страницу входа\n      return; // Останавливаем выполнение, если нет токена/userId\n    }\n    this.connectSocket();\n    this.fetchUsers();\n    // Добавляем обработчик для закрытия контекстного меню при клике в любом месте\n    document.addEventListener('click', this.closeContextMenu);\n  },\n  beforeUnmount() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // Удаляем обработчик при уничтожении компонента\n    document.removeEventListener('click', this.closeContextMenu);\n  },\n  watch: {\n    selectedUser(newVal, oldVal) {\n      if (newVal && newVal.id !== (oldVal ? oldVal.id : null)) {\n        this.fetchMessages(newVal.id);\n        this.editingMessageId = null; // Сбрасываем редактирование при смене чата\n        this.contextMenu.visible = false; // Скрываем меню\n      }\n    }\n  },\n  methods: {\n    connectSocket() {\n      this.socket = io('http://192.168.100.2:3000'); // Используем актуальный IP\n\n      this.socket.on('connect', () => {\n        console.log('Socket connected:', this.socket.id);\n        if (this.token) {\n          this.socket.emit('authenticate', this.token);\n        }\n      });\n      this.socket.on('authenticated', data => {\n        console.log('Socket authenticated for user:', data.nickname);\n        this.userId = data.userId;\n        this.nickname = data.nickname;\n      });\n      this.socket.on('authentication_error', data => {\n        console.error('Socket authentication error:', data.message);\n        localStorage.removeItem('chatToken');\n        localStorage.removeItem('chatUserId');\n        localStorage.removeItem('chatNickname');\n        alert('Ошибка аутентификации. Пожалуйста, войдите снова.');\n        this.$router.push('/log');\n      });\n      this.socket.on('receive_message', newMessage => {\n        console.log('Получено сообщение:', newMessage);\n        if (newMessage.sender_id === this.userId && newMessage.receiver_id === this.selectedUser?.id || newMessage.sender_id === this.selectedUser?.id && newMessage.receiver_id === this.userId) {\n          this.messages.push(newMessage);\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        }\n      });\n      this.socket.on('message_error', error => {\n        console.error('Message error:', error.message);\n        alert(`Ошибка сообщения: ${error.message}`);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Socket disconnected');\n      });\n      this.socket.on('message_updated', updatedMsg => {\n        console.log('Сообщение обновлено через Socket.IO:', updatedMsg);\n        const index = this.messages.findIndex(m => m.id === updatedMsg.id);\n        if (index !== -1) {\n          if (updatedMsg.sender_id === this.userId && updatedMsg.receiver_id === this.selectedUser?.id || updatedMsg.sender_id === this.selectedUser?.id && updatedMsg.receiver_id === this.userId) {\n            this.messages.splice(index, 1, updatedMsg);\n            this.$nextTick(() => {\n              this.scrollToBottom();\n            });\n          }\n        }\n      });\n      this.socket.on('message_deleted', ({\n        messageId,\n        senderId,\n        receiverId\n      }) => {\n        console.log('Сообщение удалено через Socket.IO:', messageId);\n        if (senderId === this.userId && receiverId === this.selectedUser?.id || senderId === this.selectedUser?.id && receiverId === this.userId) {\n          this.messages = this.messages.filter(m => m.id !== messageId);\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        }\n      });\n    },\n    async fetchUsers() {\n      try {\n        const response = await fetch('http://192.168.100.2:3000/api/users', {\n          // Используем актуальный IP\n          headers: {\n            'Authorization': `Bearer ${this.token}`\n          }\n        });\n        if (response.ok) {\n          let fetchedUsers = await response.json();\n          this.users = fetchedUsers.filter(user => user.id !== this.userId);\n          if (this.users.length > 0 && !this.selectedUser) {\n            this.selectUser(this.users[0]); // Автоматический выбор первого пользователя\n          }\n        } else if (response.status === 401) {\n          console.error('Неавторизованный доступ к пользователям. Перенаправление на вход.');\n          localStorage.removeItem('chatToken');\n          localStorage.removeItem('chatUserId');\n          localStorage.removeItem('chatNickname');\n          this.$router.push('/log');\n        } else {\n          console.error('Failed to fetch users:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    },\n    async fetchMessages(otherUserId) {\n      if (!otherUserId) return;\n      try {\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${otherUserId}`, {\n          // Используем актуальный IP\n          headers: {\n            'Authorization': `Bearer ${this.token}`\n          }\n        });\n        if (response.ok) {\n          this.messages = await response.json();\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        } else if (response.status === 401) {\n          console.error('Неавторизованный доступ к сообщениям. Перенаправление на вход.');\n          localStorage.removeItem('chatToken');\n          localStorage.removeItem('chatUserId');\n          localStorage.removeItem('chatNickname');\n          this.$router.push('/log');\n        } else {\n          console.error('Failed to fetch messages:', response.statusText);\n          this.messages = [];\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        this.messages = [];\n      }\n    },\n    sendMessage() {\n      if (this.message.trim() === '' || !this.socket || !this.selectedUser) {\n        return;\n      }\n      this.socket.emit('send_message', {\n        receiverId: this.selectedUser.id,\n        message: this.message.trim()\n      });\n      this.message = '';\n    },\n    selectUser(user) {\n      this.selectedUser = user;\n      this.messages = [];\n    },\n    showContextMenu(message, event) {\n      if (message.sender_id !== this.userId) return;\n      this.contextMenu.messageId = message.id;\n      this.contextMenu.x = event.clientX;\n      this.contextMenu.y = event.clientY;\n      this.contextMenu.visible = true;\n      event.stopPropagation();\n    },\n    closeContextMenu() {\n      this.contextMenu.visible = false;\n      this.contextMenu.messageId = null;\n    },\n    startEditing(message) {\n      this.editingMessageId = message.id;\n      this.editingMessageText = message.message;\n      this.closeContextMenu();\n    },\n    async saveEditedMessage() {\n      if (this.editingMessageText.trim() === '') {\n        alert('Сообщение не может быть пустым.');\n        return;\n      }\n      if (!this.editingMessageId) {\n        console.error('Не выбран ID сообщения для редактирования.');\n        return;\n      }\n      try {\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${this.editingMessageId}`, {\n          // Используем актуальный IP\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.token}`\n          },\n          body: JSON.stringify({\n            newMessageText: this.editingMessageText\n          })\n        });\n        if (response.ok) {\n          console.log('Сообщение успешно отредактировано на сервере.');\n        } else {\n          const errorData = await response.json();\n          console.error('Ошибка при редактировании сообщения:', errorData.message);\n          alert(`Ошибка: ${errorData.message}`);\n        }\n      } catch (error) {\n        console.error('Network error during message edit:', error);\n        alert('Не удалось подключиться к серверу для редактирования сообщения.');\n      } finally {\n        this.cancelEditing();\n      }\n    },\n    cancelEditing() {\n      this.editingMessageId = null;\n      this.editingMessageText = '';\n    },\n    async deleteMessage(messageId) {\n      if (!confirm('Вы уверены, что хотите удалить это сообщение?')) {\n        return;\n      }\n      if (!messageId) {\n        console.error('Не выбран ID сообщения для удаления.');\n        return;\n      }\n      try {\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${messageId}`, {\n          // Используем актуальный IP\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${this.token}`\n          }\n        });\n        if (response.ok) {\n          console.log('Сообщение успешно удалено на сервере.');\n        } else {\n          const errorData = await response.json();\n          console.error('Ошибка при удалении сообщения:', errorData.message);\n          alert(`Ошибка: ${errorData.message}`);\n        }\n      } catch (error) {\n        console.error('Network error during message delete:', error);\n        alert('Не удалось подключиться к серверу для удаления сообщения.');\n      } finally {\n        this.closeContextMenu();\n      }\n    },\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\n      if (!prevTimestamp) {\n        return true;\n      }\n      const current = new Date(currentTimestamp);\n      const prev = new Date(prevTimestamp);\n      if (current.toDateString() !== prev.toDateString()) {\n        return true;\n      }\n      const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\n      return diffMinutes >= 2 || current.getHours() !== prev.getHours();\n    },\n    formatTimestamp(timestamp) {\n      const now = new Date();\n      const messageDate = new Date(timestamp);\n      const isToday = now.toDateString() === messageDate.toDateString();\n      if (isToday) {\n        return messageDate.toLocaleTimeString('ru-RU', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } else {\n        const options = {\n          day: 'numeric',\n          month: 'short',\n          hour: '2-digit',\n          minute: '2-digit'\n        };\n        return messageDate.toLocaleDateString('ru-RU', options).replace(/\\./g, '').replace(',', '').trim();\n      }\n    },\n    scrollToBottom() {\n      const messagesContainer = this.$refs.messagesContainer;\n      if (messagesContainer) {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }\n    }\n  }\n};","map":{"version":3,"names":["io","name","data","socket","message","messages","token","localStorage","getItem","userId","nickname","users","selectedUser","editingMessageId","editingMessageText","contextMenu","visible","messageId","x","y","directives","focus","mounted","el","created","console","warn","$router","push","connectSocket","fetchUsers","document","addEventListener","closeContextMenu","beforeUnmount","disconnect","removeEventListener","watch","newVal","oldVal","id","fetchMessages","methods","on","log","emit","error","removeItem","alert","newMessage","sender_id","receiver_id","$nextTick","scrollToBottom","updatedMsg","index","findIndex","m","splice","senderId","receiverId","filter","response","fetch","headers","ok","fetchedUsers","json","user","length","selectUser","status","statusText","otherUserId","sendMessage","trim","showContextMenu","event","clientX","clientY","stopPropagation","startEditing","saveEditedMessage","method","body","JSON","stringify","newMessageText","errorData","cancelEditing","deleteMessage","confirm","shouldShowTimestamp","currentTimestamp","prevTimestamp","current","Date","prev","toDateString","diffMinutes","Math","abs","getTime","getHours","formatTimestamp","timestamp","now","messageDate","isToday","toLocaleTimeString","hour","minute","options","day","month","toLocaleDateString","replace","messagesContainer","$refs","scrollTop","scrollHeight"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <div class=\"user-list-sidebar\">\r\n      <div class=\"sidebar-header\">\r\n        <h3>Chat Name</h3>\r\n      </div>\r\n      <div class=\"user-list\">\r\n        <div v-if=\"users.length === 0\" class=\"loading-users\">\r\n          Загрузка пользователей...\r\n        </div>\r\n        <ul v-else>\r\n          <li\r\n            v-for=\"user in users\"\r\n            :key=\"user.id\"\r\n            @click=\"selectUser(user)\"\r\n            :class=\"{ 'selected-user': selectedUser && selectedUser.id === user.id }\"\r\n          >\r\n            {{ user.nickname }} {{ user.id === userId ? '(Вы)' : '' }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"main-chat-area\">\r\n      <div class=\"chat-header\">\r\n        <h2>{{ selectedUser ? selectedUser.nickname : 'Выберите собеседника' }}</h2>\r\n      </div>\r\n\r\n      <div class=\"messages\" ref=\"messagesContainer\">\r\n        <div v-if=\"!selectedUser\" class=\"no-chat-selected\">\r\n          Пожалуйста, выберите собеседника, чтобы начать чат.\r\n        </div>\r\n        <template v-else>\r\n          <div v-for=\"(msg, index) in messages\" :key=\"msg.id\" class=\"message-group\">\r\n            <div\r\n              v-if=\"shouldShowTimestamp(msg.timestamp, index > 0 ? messages[index - 1].timestamp : null)\"\r\n              class=\"timestamp\"\r\n            >\r\n              {{ formatTimestamp(msg.timestamp) }}\r\n            </div>\r\n            <div :class=\"['message', msg.sender_id === userId ? 'message--sent' : 'message--received']\"\r\n                 @click=\"msg.sender_id === userId && showContextMenu(msg, $event)\"\r\n                 @contextmenu.prevent=\"msg.sender_id === userId && showContextMenu(msg, $event)\">\r\n              <template v-if=\"editingMessageId === msg.id\">\r\n                <input\r\n                  v-model=\"editingMessageText\"\r\n                  @keyup.enter=\"saveEditedMessage\"\r\n                  @keyup.esc=\"cancelEditing\"\r\n                  v-focus\r\n                  class=\"edit-input\"\r\n                />\r\n                <div class=\"edit-actions\">\r\n                  <button @click=\"saveEditedMessage\" class=\"save-button\">Сохранить</button>\r\n                  <button @click=\"cancelEditing\" class=\"cancel-button\">Отмена</button>\r\n                </div>\r\n              </template>\r\n              <template v-else>\r\n                {{ msg.message }}\r\n              </template>\r\n            </div>\r\n\r\n            <div v-if=\"contextMenu.visible && contextMenu.messageId === msg.id\"\r\n                 :style=\"{ left: contextMenu.x + 'px', top: contextMenu.y + 'px' }\"\r\n                 class=\"message-context-menu\">\r\n              <div @click=\"startEditing(msg)\">Редактировать</div>\r\n              <div @click=\"deleteMessage(msg.id)\">Удалить</div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n\r\n      <div class=\"input-area\">\r\n        <div class=\"input-wrapper\">\r\n          <input\r\n            v-model=\"message\"\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            class=\"message-input\"\r\n            @keyup.enter=\"sendMessage\"\r\n            :disabled=\"!selectedUser\"\r\n          />\r\n          <button class=\"send-button\" @click=\"sendMessage\" :disabled=\"!selectedUser\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { io } from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'ChatPage',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      message: '',\r\n      messages: [],\r\n      token: localStorage.getItem('chatToken') || '',\r\n      userId: localStorage.getItem('chatUserId') || null,\r\n      nickname: localStorage.getItem('chatNickname') || '',\r\n      users: [],\r\n      selectedUser: null,\r\n      editingMessageId: null, // ID сообщения, которое редактируется\r\n      editingMessageText: '', // Текст сообщения в поле редактирования\r\n      contextMenu: { // Для отображения контекстного меню\r\n        visible: false,\r\n        messageId: null,\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    };\r\n  },\r\n  directives: {\r\n    focus: { // Кастомная директива для автоматического фокуса на поле редактирования\r\n      mounted(el) {\r\n        el.focus();\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // Проверяем наличие токена и userId\r\n    if (!this.token || !this.userId) {\r\n      console.warn('Токен или ID пользователя отсутствуют. Перенаправление на страницу входа.');\r\n      this.$router.push('/log'); // Перенаправить на страницу входа\r\n      return; // Останавливаем выполнение, если нет токена/userId\r\n    }\r\n\r\n    this.connectSocket();\r\n    this.fetchUsers();\r\n    // Добавляем обработчик для закрытия контекстного меню при клике в любом месте\r\n    document.addEventListener('click', this.closeContextMenu);\r\n  },\r\n  beforeUnmount() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n    // Удаляем обработчик при уничтожении компонента\r\n    document.removeEventListener('click', this.closeContextMenu);\r\n  },\r\n  watch: {\r\n    selectedUser(newVal, oldVal) {\r\n      if (newVal && newVal.id !== (oldVal ? oldVal.id : null)) {\r\n        this.fetchMessages(newVal.id);\r\n        this.editingMessageId = null; // Сбрасываем редактирование при смене чата\r\n        this.contextMenu.visible = false; // Скрываем меню\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    connectSocket() {\r\n      this.socket = io('http://192.168.100.2:3000'); // Используем актуальный IP\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected:', this.socket.id);\r\n        if (this.token) {\r\n          this.socket.emit('authenticate', this.token);\r\n        }\r\n      });\r\n\r\n      this.socket.on('authenticated', (data) => {\r\n        console.log('Socket authenticated for user:', data.nickname);\r\n        this.userId = data.userId;\r\n        this.nickname = data.nickname;\r\n      });\r\n\r\n      this.socket.on('authentication_error', (data) => {\r\n        console.error('Socket authentication error:', data.message);\r\n        localStorage.removeItem('chatToken');\r\n        localStorage.removeItem('chatUserId');\r\n        localStorage.removeItem('chatNickname');\r\n        alert('Ошибка аутентификации. Пожалуйста, войдите снова.');\r\n        this.$router.push('/log');\r\n      });\r\n\r\n      this.socket.on('receive_message', (newMessage) => {\r\n        console.log('Получено сообщение:', newMessage);\r\n        if (\r\n            (newMessage.sender_id === this.userId && newMessage.receiver_id === this.selectedUser?.id) ||\r\n            (newMessage.sender_id === this.selectedUser?.id && newMessage.receiver_id === this.userId)\r\n        ) {\r\n          this.messages.push(newMessage);\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        }\r\n      });\r\n\r\n      this.socket.on('message_error', (error) => {\r\n        console.error('Message error:', error.message);\r\n        alert(`Ошибка сообщения: ${error.message}`);\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Socket disconnected');\r\n      });\r\n\r\n      this.socket.on('message_updated', (updatedMsg) => {\r\n        console.log('Сообщение обновлено через Socket.IO:', updatedMsg);\r\n        const index = this.messages.findIndex(m => m.id === updatedMsg.id);\r\n        if (index !== -1) {\r\n          if (\r\n              (updatedMsg.sender_id === this.userId && updatedMsg.receiver_id === this.selectedUser?.id) ||\r\n              (updatedMsg.sender_id === this.selectedUser?.id && updatedMsg.receiver_id === this.userId)\r\n          ) {\r\n              this.messages.splice(index, 1, updatedMsg);\r\n              this.$nextTick(() => {\r\n                  this.scrollToBottom();\r\n              });\r\n          }\r\n        }\r\n      });\r\n\r\n      this.socket.on('message_deleted', ({ messageId, senderId, receiverId }) => {\r\n        console.log('Сообщение удалено через Socket.IO:', messageId);\r\n        if (\r\n            (senderId === this.userId && receiverId === this.selectedUser?.id) ||\r\n            (senderId === this.selectedUser?.id && receiverId === this.userId)\r\n        ) {\r\n          this.messages = this.messages.filter(m => m.id !== messageId);\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    async fetchUsers() {\r\n      try {\r\n        const response = await fetch('http://192.168.100.2:3000/api/users', { // Используем актуальный IP\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n        if (response.ok) {\r\n          let fetchedUsers = await response.json();\r\n          this.users = fetchedUsers.filter(user => user.id !== this.userId);\r\n          if (this.users.length > 0 && !this.selectedUser) {\r\n              this.selectUser(this.users[0]); // Автоматический выбор первого пользователя\r\n          }\r\n        } else if (response.status === 401) {\r\n            console.error('Неавторизованный доступ к пользователям. Перенаправление на вход.');\r\n            localStorage.removeItem('chatToken');\r\n            localStorage.removeItem('chatUserId');\r\n            localStorage.removeItem('chatNickname');\r\n            this.$router.push('/log');\r\n        } else {\r\n          console.error('Failed to fetch users:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages(otherUserId) {\r\n      if (!otherUserId) return;\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${otherUserId}`, { // Используем актуальный IP\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n        if (response.ok) {\r\n          this.messages = await response.json();\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        } else if (response.status === 401) {\r\n            console.error('Неавторизованный доступ к сообщениям. Перенаправление на вход.');\r\n            localStorage.removeItem('chatToken');\r\n            localStorage.removeItem('chatUserId');\r\n            localStorage.removeItem('chatNickname');\r\n            this.$router.push('/log');\r\n        } else {\r\n          console.error('Failed to fetch messages:', response.statusText);\r\n          this.messages = [];\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n        this.messages = [];\r\n      }\r\n    },\r\n\r\n    sendMessage() {\r\n      if (this.message.trim() === '' || !this.socket || !this.selectedUser) {\r\n        return;\r\n      }\r\n\r\n      this.socket.emit('send_message', {\r\n        receiverId: this.selectedUser.id,\r\n        message: this.message.trim(),\r\n      });\r\n\r\n      this.message = '';\r\n    },\r\n\r\n    selectUser(user) {\r\n      this.selectedUser = user;\r\n      this.messages = [];\r\n    },\r\n\r\n    showContextMenu(message, event) {\r\n        if (message.sender_id !== this.userId) return;\r\n\r\n        this.contextMenu.messageId = message.id;\r\n        this.contextMenu.x = event.clientX;\r\n        this.contextMenu.y = event.clientY;\r\n        this.contextMenu.visible = true;\r\n\r\n        event.stopPropagation();\r\n    },\r\n    closeContextMenu() {\r\n        this.contextMenu.visible = false;\r\n        this.contextMenu.messageId = null;\r\n    },\r\n\r\n    startEditing(message) {\r\n      this.editingMessageId = message.id;\r\n      this.editingMessageText = message.message;\r\n      this.closeContextMenu();\r\n    },\r\n\r\n    async saveEditedMessage() {\r\n      if (this.editingMessageText.trim() === '') {\r\n        alert('Сообщение не может быть пустым.');\r\n        return;\r\n      }\r\n      if (!this.editingMessageId) {\r\n          console.error('Не выбран ID сообщения для редактирования.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${this.editingMessageId}`, { // Используем актуальный IP\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${this.token}`\r\n          },\r\n          body: JSON.stringify({ newMessageText: this.editingMessageText })\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Сообщение успешно отредактировано на сервере.');\r\n        } else {\r\n          const errorData = await response.json();\r\n          console.error('Ошибка при редактировании сообщения:', errorData.message);\r\n          alert(`Ошибка: ${errorData.message}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Network error during message edit:', error);\r\n        alert('Не удалось подключиться к серверу для редактирования сообщения.');\r\n      } finally {\r\n        this.cancelEditing();\r\n      }\r\n    },\r\n\r\n    cancelEditing() {\r\n      this.editingMessageId = null;\r\n      this.editingMessageText = '';\r\n    },\r\n\r\n    async deleteMessage(messageId) {\r\n      if (!confirm('Вы уверены, что хотите удалить это сообщение?')) {\r\n        return;\r\n      }\r\n      if (!messageId) {\r\n          console.error('Не выбран ID сообщения для удаления.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://192.168.100.2:3000/api/messages/${messageId}`, { // Используем актуальный IP\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.token}`\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Сообщение успешно удалено на сервере.');\r\n        } else {\r\n          const errorData = await response.json();\r\n          console.error('Ошибка при удалении сообщения:', errorData.message);\r\n          alert(`Ошибка: ${errorData.message}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Network error during message delete:', error);\r\n        alert('Не удалось подключиться к серверу для удаления сообщения.');\r\n      } finally {\r\n        this.closeContextMenu();\r\n      }\r\n    },\r\n\r\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\r\n        if (!prevTimestamp) {\r\n            return true;\r\n        }\r\n\r\n        const current = new Date(currentTimestamp);\r\n        const prev = new Date(prevTimestamp);\r\n\r\n        if (current.toDateString() !== prev.toDateString()) {\r\n            return true;\r\n        }\r\n\r\n        const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\r\n\r\n        return diffMinutes >= 2 || current.getHours() !== prev.getHours();\r\n    },\r\n\r\n    formatTimestamp(timestamp) {\r\n        const now = new Date();\r\n        const messageDate = new Date(timestamp);\r\n\r\n        const isToday = now.toDateString() === messageDate.toDateString();\r\n\r\n        if (isToday) {\r\n            return messageDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            const options = {\r\n                day: 'numeric',\r\n                month: 'short',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n            };\r\n            return messageDate.toLocaleDateString('ru-RU', options)\r\n                               .replace(/\\./g, '')\r\n                               .replace(',', '')\r\n                               .trim();\r\n        }\r\n    },\r\n    scrollToBottom() {\r\n        const messagesContainer = this.$refs.messagesContainer;\r\n        if (messagesContainer) {\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');\r\n\r\n/* Основной контейнер чата */\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #4A5469;\r\n  font-family: 'Roboto', sans-serif;\r\n  overflow: hidden; /* Предотвращает прокрутку всего окна */\r\n}\r\n\r\n/* Левая панель - список пользователей */\r\n.user-list-sidebar {\r\n  width: 250px; /* Фиксированная ширина */\r\n  background-color: #4A5469;\r\n  border-right: 1px solid #4A5469;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: white;\r\n  overflow-y: auto; /* Прокрутка списка пользователей */\r\n  padding-bottom: 20px; /* Отступ снизу */\r\n}\r\n\r\n.sidebar-header {\r\n  padding: 10.8px;\r\n  background-color: #4A5469;\r\n  text-align: left;\r\n}\r\n\r\n.sidebar-header h3 {\r\n  margin: 0;\r\n  font-size: 1.2rem;\r\n  background-color: #4A5469;\r\n  color: white; /* Цвет \"Chat Name\" */\r\n}\r\n\r\n.user-list {\r\n  flex-grow: 1; /* Занимает все доступное пространство */\r\n  padding: 10px 0;\r\n}\r\n\r\n.user-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.user-list li {\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.user-list li:hover {\r\n  background-color: #4A5469;\r\n}\r\n\r\n.user-list li.selected-user {\r\n  background-color: #5A657D; /* Цвет выбранного пользователя */\r\n  font-weight: bold;\r\n}\r\n\r\n.loading-users {\r\n    padding: 20px;\r\n    text-align: center;\r\n    color: #ccc;\r\n}\r\n\r\n/* Основная область чата */\r\n.main-chat-area {\r\n  flex-grow: 1; /* Занимает все оставшееся пространство */\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #292F3F;\r\n  position: relative; /* Для правильного позиционирования input-area */\r\n}\r\n\r\n.chat-header {\r\n  height: 45px;\r\n  width: 100%;\r\n  background-color: #373E4E;\r\n  color: white;\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  box-sizing: border-box; /* Включает padding в высоту */\r\n}\r\n\r\n.chat-header h2 {\r\n  margin: 0;\r\n  background-color: #373e4e;\r\n  font-size: 1.3rem;\r\n  line-height: 1; /* Выравнивание по центру */\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 10px 20px;\r\n  box-sizing: border-box;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.no-chat-selected {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    color: #aaa;\r\n    font-size: 1.2rem;\r\n    text-align: center;\r\n}\r\n\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.timestamp {\r\n  color: #ffff;\r\n  font-size: 0.75rem;\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 20px;\r\n  word-break: break-word;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.message--received {\r\n  background-color: #373E4E;\r\n  align-self: flex-start;\r\n  color: white;\r\n}\r\n\r\n.message--sent {\r\n  background-color: #272A35;\r\n  align-self: flex-end;\r\n  color: white;\r\n}\r\n\r\n.edit-input {\r\n    width: calc(100% - 70px);\r\n    background-color: #4A5469;\r\n    border: 1px solid #6c7a89;\r\n    border-radius: 10px;\r\n    padding: 8px 12px;\r\n    color: white;\r\n    font-size: 0.95rem;\r\n    box-sizing: border-box;\r\n    margin-right: 5px;\r\n}\r\n\r\n.edit-actions {\r\n    display: flex;\r\n    gap: 5px;\r\n    margin-top: 5px;\r\n}\r\n\r\n.save-button, .cancel-button {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    padding: 5px 10px;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.cancel-button {\r\n    background-color: #f44336;\r\n}\r\n\r\n.message-context-menu {\r\n  position: absolute; /* Changed from fixed to absolute, positioned relative to .message-group */\r\n  background-color: #373E4E;\r\n  border: 1px solid #4A5469;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  padding: 5px 0;\r\n  /* Для того, чтобы меню появлялось рядом с сообщением, а не в верхнем левом углу страницы */\r\n  transform: translateX(10px); /* Небольшой сдвиг от сообщения */\r\n}\r\n\r\n/* Если меню появляется слишком далеко, можно добавить: */\r\n.message--sent + .message-context-menu {\r\n  right: 0; /* Выравнивает меню по правому краю для отправленных сообщений */\r\n  transform: translateX(-10px); /* Сдвигает влево */\r\n}\r\n\r\n.message-context-menu div {\r\n  padding: 8px 15px;\r\n  color: white;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n}\r\n\r\n.message-context-menu div:hover {\r\n  background-color: #4A5469;\r\n}\r\n\r\n.input-area {\r\n  position: absolute; /* Изменено с fixed на absolute */\r\n  bottom: 20px;\r\n  left: 20px; /* Отступ от левого края main-chat-area */\r\n  right: 20px; /* Отступ от правого края main-chat-area */\r\n  width: auto; /* Ширина определяется left/right */\r\n  max-width: none; /* Убираем max-width, т.к. ширина уже задана */\r\n  box-sizing: border-box;\r\n  background-color: #292F3F;\r\n  padding-top: 10px;\r\n  z-index: 10; /* Чтобы быть поверх сообщений */\r\n}\r\n\r\n.input-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.message-input {\r\n  width: 100%;\r\n  height: 45px;\r\n  background-color: #272A35;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 0 50px 0 15px;\r\n  color: white;\r\n  font-size: 1rem;\r\n  font-family: 'Roboto', sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.send-button {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 35px;\r\n  height: 35px;\r\n  background-color: #373E4E;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-size: 1.1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0;\r\n  background-image: url('@/assets/speech-bubble.svg'); /* Убедитесь, что этот путь верен */\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: 20px 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    flex-direction: column; /* На маленьких экранах делаем колонку */\r\n  }\r\n\r\n  .user-list-sidebar {\r\n    width: 100%;\r\n    height: 150px; /* Ограничиваем высоту на мобильных */\r\n    border-right: none;\r\n    border-bottom: 1px solid #4A5469;\r\n  }\r\n\r\n  .user-list {\r\n    display: flex; /* Делаем список пользователей горизонтальным прокручиваемым */\r\n    overflow-x: auto;\r\n    white-space: nowrap; /* Запрещаем перенос строк */\r\n  }\r\n\r\n  .user-list ul {\r\n    display: flex; /* Делаем элементы списка flex */\r\n    gap: 5px; /* Небольшой отступ между элементами */\r\n  }\r\n\r\n  .user-list li {\r\n    flex-shrink: 0; /* Не сжимаем элементы */\r\n    border-bottom: none;\r\n    border-right: 1px solid #373E4E; /* Добавляем разделитель между пользователями */\r\n  }\r\n\r\n  .main-chat-area {\r\n    width: 100%; /* Занимает всю ширину */\r\n    flex-grow: 1; /* Занимает оставшуюся высоту */\r\n  }\r\n\r\n  .messages {\r\n    padding-bottom: 80px; /* Корректируем отступ для инпута */\r\n  }\r\n\r\n  .input-area {\r\n    left: 10px;\r\n    right: 10px;\r\n    bottom: 10px;\r\n  }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .message {\r\n    font-size: 0.95rem;\r\n  }\r\n\r\n  .message-input {\r\n    height: 40px;\r\n    font-size: 0.95rem;\r\n    padding-right: 45px;\r\n  }\r\n\r\n  .send-button {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .user-list li {\r\n    padding: 8px 12px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}