{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { validatePassword, validateConfirmPassword } from '../../../C/validation_reg';\nexport default {\n  name: 'RegistrationPage',\n  data() {\n    return {\n      nickname: '',\n      password: '',\n      confirmPassword: '',\n      nicknameError: '',\n      passwordError: '',\n      confirmPasswordError: '',\n      generalError: '',\n      successMessage: ''\n    };\n  },\n  methods: {\n    clearErrors(field = null) {\n      if (field === 'nickname') this.nicknameError = '';else if (field === 'password') this.passwordError = '';else if (field === 'confirmPassword') this.confirmPasswordError = '';else {\n        this.nicknameError = '';\n        this.passwordError = '';\n        this.confirmPasswordError = '';\n        this.generalError = '';\n        this.successMessage = '';\n      }\n    },\n    async register() {\n      this.clearErrors();\n      let isValid = true;\n      if (!this.nickname.trim()) {\n        this.nicknameError = 'Логин не может быть пустым.';\n        isValid = false;\n      }\n      const passwordValidationResult = validatePassword(this.password);\n      if (passwordValidationResult) {\n        this.passwordError = passwordValidationResult;\n        isValid = false;\n      }\n      const confirmPasswordValidationResult = validateConfirmPassword(this.password, this.confirmPassword);\n      if (confirmPasswordValidationResult) {\n        this.confirmPasswordError = confirmPasswordValidationResult;\n        isValid = false;\n      }\n      if (!isValid) {\n        return;\n      }\n      try {\n        const response = await fetch('http://192.168.100.2:3000/api/auth/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            nickname: this.nickname,\n            password: this.password\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          this.successMessage = data.message || 'Регистрация успешно выполнена!';\n          this.nickname = '';\n          this.password = '';\n          this.confirmPassword = '';\n          setTimeout(() => {\n            this.$router.push('/log');\n          }, 2000);\n        } else {\n          this.generalError = data.message || 'Произошла ошибка при регистрации. Пожалуйста, попробуйте еще раз.';\n        }\n      } catch (error) {\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение или запустите сервер.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["validatePassword","validateConfirmPassword","name","data","nickname","password","confirmPassword","nicknameError","passwordError","confirmPasswordError","generalError","successMessage","methods","clearErrors","field","register","isValid","trim","passwordValidationResult","confirmPasswordValidationResult","response","fetch","method","headers","body","JSON","stringify","json","ok","message","setTimeout","$router","push","error"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\RegistrationPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"reg-wrapper\">\r\n    <div class=\"form-container\">\r\n      <label class=\"label\">Login</label>\r\n      <input type=\"text\" class=\"input\" v-model=\"nickname\" @input=\"clearErrors('nickname')\" />\r\n      <div v-if=\"nicknameError\" class=\"error-message\">{{ nicknameError }}</div>\r\n\r\n      <label class=\"label\">Password</label>\r\n      <input type=\"password\" class=\"input\" v-model=\"password\" @input=\"clearErrors('password')\" />\r\n      <div v-if=\"passwordError\" class=\"error-message\">{{ passwordError }}</div>\r\n\r\n      <label class=\"label\">Password Check</label>\r\n      <input type=\"password\" class=\"input\" v-model=\"confirmPassword\" @input=\"clearErrors('confirmPassword')\" />\r\n      <div v-if=\"confirmPasswordError\" class=\"error-message\">{{ confirmPasswordError }}</div>\r\n\r\n      <div v-if=\"generalError\" class=\"error-message general-error\">{{ generalError }}</div>\r\n      <div v-if=\"successMessage\" class=\"success-message\">{{ successMessage }}</div>\r\n\r\n      <button class=\"btn\" @click=\"register\">Registration</button>\r\n\r\n      <router-link to=\"/log\" class=\"link\">Already have an account?</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { validatePassword, validateConfirmPassword } from '../../../C/validation_reg';\r\n\r\nexport default {\r\n  name: 'RegistrationPage',\r\n  data() {\r\n    return {\r\n      nickname: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      nicknameError: '',\r\n      passwordError: '',\r\n      confirmPasswordError: '',\r\n      generalError: '',\r\n      successMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    clearErrors(field = null) {\r\n      if (field === 'nickname') this.nicknameError = '';\r\n      else if (field === 'password') this.passwordError = '';\r\n      else if (field === 'confirmPassword') this.confirmPasswordError = '';\r\n      else {\r\n        this.nicknameError = '';\r\n        this.passwordError = '';\r\n        this.confirmPasswordError = '';\r\n        this.generalError = '';\r\n        this.successMessage = '';\r\n      }\r\n    },\r\n\r\n    async register() {\r\n      this.clearErrors();\r\n\r\n      let isValid = true;\r\n\r\n      if (!this.nickname.trim()) {\r\n        this.nicknameError = 'Логин не может быть пустым.';\r\n        isValid = false;\r\n      }\r\n\r\n      const passwordValidationResult = validatePassword(this.password);\r\n      if (passwordValidationResult) {\r\n        this.passwordError = passwordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      const confirmPasswordValidationResult = validateConfirmPassword(this.password, this.confirmPassword);\r\n      if (confirmPasswordValidationResult) {\r\n        this.confirmPasswordError = confirmPasswordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      if (!isValid) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch('http://192.168.100.2:3000/api/auth/register', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ nickname: this.nickname, password: this.password })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          this.successMessage = data.message || 'Регистрация успешно выполнена!';\r\n\r\n          this.nickname = '';\r\n          this.password = '';\r\n          this.confirmPassword = '';\r\n\r\n          setTimeout(() => {\r\n            this.$router.push('/log');\r\n          }, 2000);\r\n\r\n        } else {\r\n          this.generalError = data.message || 'Произошла ошибка при регистрации. Пожалуйста, попробуйте еще раз.';\r\n        }\r\n      } catch (error) {\r\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение или запустите сервер.';\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.reg-wrapper {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: 'Abel', sans-serif;\r\n  padding: 20px;\r\n  color: #eee;\r\n}\r\n\r\n.form-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  padding: 30px;\r\n}\r\n\r\n.label {\r\n  color: #eee;\r\n  font-size: 1rem;\r\n  text-align: left;\r\n  margin-bottom: -10px;\r\n}\r\n\r\n.input {\r\n  border: 1px solid #666;\r\n  border-radius: 10px;\r\n  padding: 12px 15px;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n}\r\n\r\n.input::placeholder {\r\n  color: #aaa;\r\n}\r\n\r\n.btn {\r\n  background-color: #556B8D;\r\n  color: #FFFF;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin-top: 10px;\r\n}\r\n\r\n.btn:hover {\r\n  background-color: #42566C;\r\n}\r\n\r\n.link {\r\n  color: #FFF;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.error-message {\r\n  color: #ff6b6b;\r\n  font-size: 0.8em;\r\n  margin-top: -10px;\r\n  min-height: 1.2em;\r\n}\r\n\r\n.general-error {\r\n  text-align: center;\r\n  color: #ff6b6b;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.success-message {\r\n  text-align: center;\r\n  color: #6bff96;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}