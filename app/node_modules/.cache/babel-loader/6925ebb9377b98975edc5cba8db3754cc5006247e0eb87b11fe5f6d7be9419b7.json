{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// ВАЖНО: Убедитесь, что путь к validation_enter.js верен\n// Он должен быть '../../C/validation_enter' если LoginPage.vue в src/components,\n// а validation_enter.js в WEB/C/\nimport { validateLoginNickname, validateLoginPassword } from '../../../C/validation_enter';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      nickname: '',\n      password: '',\n      nicknameError: '',\n      passwordError: '',\n      generalError: '',\n      successMessage: ''\n    };\n  },\n  methods: {\n    clearErrors(field = null) {\n      if (field === 'nickname') {\n        this.nicknameError = '';\n      } else if (field === 'password') {\n        this.passwordError = '';\n      } else {\n        this.nicknameError = '';\n        this.passwordError = '';\n        this.generalError = '';\n        this.successMessage = '';\n      }\n    },\n    async login() {\n      this.clearErrors();\n      let isValid = true;\n\n      // 1. Клиентская валидация никнейма с использованием функции из validation_enter.js\n      const nicknameValidationResult = validateLoginNickname(this.nickname);\n      if (nicknameValidationResult) {\n        this.nicknameError = nicknameValidationResult;\n        isValid = false;\n      }\n\n      // 2. Клиентская валидация пароля с использованием функции из validation_enter.js\n      const passwordValidationResult = validateLoginPassword(this.password);\n      if (passwordValidationResult) {\n        this.passwordError = passwordValidationResult;\n        isValid = false;\n      }\n\n      // Если есть ошибки клиентской валидации, прерываем отправку на сервер\n      if (!isValid) {\n        console.log('Форма содержит ошибки клиентской валидации. Отправка на сервер отменена.');\n        return;\n      }\n\n      // Если клиентская валидация успешна, отправляем запрос на бэкенд\n      try {\n        const response = await fetch('http://localhost:3000/api/auth/login', {\n          // URL вашего бэкенд API для входа\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            nickname: this.nickname,\n            password: this.password\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // response.ok для статусов 2xx\n          console.log('Вход успешен:', data);\n          this.successMessage = data.message || 'Вход успешно выполнен!';\n\n          // Сохраняем токен и информацию о пользователе\n          localStorage.setItem('chatToken', data.token);\n          localStorage.setItem('chatUserId', data.userId);\n          localStorage.setItem('chatNickname', data.nickname);\n          this.nickname = '';\n          this.password = '';\n\n          // Перенаправляем пользователя на страницу чата\n          setTimeout(() => {\n            this.$router.push('/chat');\n          }, 1500);\n        } else {\n          console.error('Ошибка входа:', data);\n          this.generalError = data.message || 'Произошла ошибка при входе. Пожалуйста, попробуйте еще раз.';\n          // Ваш бэкенд возвращает 'Неверный никнейм или пароль.' для обоих случаев (пользователь не найден или пароль не совпадает)\n        }\n      } catch (error) {\n        console.error('Произошла ошибка сети или другое непредвиденное исключение:', error);\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение или запустите сервер.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["validateLoginNickname","validateLoginPassword","name","data","nickname","password","nicknameError","passwordError","generalError","successMessage","methods","clearErrors","field","login","isValid","nicknameValidationResult","passwordValidationResult","console","log","response","fetch","method","headers","body","JSON","stringify","json","ok","message","localStorage","setItem","token","userId","setTimeout","$router","push","error"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-wrapper\">\r\n    <div class=\"form-container\">\r\n      <label class=\"label\">Login</label>\r\n      <input type=\"text\" class=\"input\" v-model=\"nickname\" @input=\"clearErrors('nickname')\" />\r\n      <div v-if=\"nicknameError\" class=\"error-message\">{{ nicknameError }}</div>\r\n\r\n      <label class=\"label\">Password</label>\r\n      <input type=\"password\" class=\"input\" v-model=\"password\" @input=\"clearErrors('password')\" />\r\n      <div v-if=\"passwordError\" class=\"error-message\">{{ passwordError }}</div>\r\n\r\n      <div v-if=\"generalError\" class=\"error-message general-error\">{{ generalError }}</div>\r\n      <div v-if=\"successMessage\" class=\"success-message\">{{ successMessage }}</div>\r\n\r\n      <router-link to=\"#\" class=\"full-width-link\">\r\n        <button class=\"btn\" @click.prevent=\"login\">Login</button>\r\n      </router-link>\r\n\r\n      <router-link to=\"/reg\" class=\"link\">Don't have an account?</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// ВАЖНО: Убедитесь, что путь к validation_enter.js верен\r\n// Он должен быть '../../C/validation_enter' если LoginPage.vue в src/components,\r\n// а validation_enter.js в WEB/C/\r\nimport { validateLoginNickname, validateLoginPassword } from '../../../C/validation_enter';\r\n\r\nexport default {\r\n  name: 'LoginPage',\r\n  data() {\r\n    return {\r\n      nickname: '',\r\n      password: '',\r\n      nicknameError: '',\r\n      passwordError: '',\r\n      generalError: '',\r\n      successMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    clearErrors(field = null) {\r\n      if (field === 'nickname') {\r\n        this.nicknameError = '';\r\n      } else if (field === 'password') {\r\n        this.passwordError = '';\r\n      } else {\r\n        this.nicknameError = '';\r\n        this.passwordError = '';\r\n        this.generalError = '';\r\n        this.successMessage = '';\r\n      }\r\n    },\r\n\r\n    async login() {\r\n      this.clearErrors();\r\n\r\n      let isValid = true;\r\n\r\n      // 1. Клиентская валидация никнейма с использованием функции из validation_enter.js\r\n      const nicknameValidationResult = validateLoginNickname(this.nickname);\r\n      if (nicknameValidationResult) {\r\n        this.nicknameError = nicknameValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      // 2. Клиентская валидация пароля с использованием функции из validation_enter.js\r\n      const passwordValidationResult = validateLoginPassword(this.password);\r\n      if (passwordValidationResult) {\r\n        this.passwordError = passwordValidationResult;\r\n        isValid = false;\r\n      }\r\n\r\n      // Если есть ошибки клиентской валидации, прерываем отправку на сервер\r\n      if (!isValid) {\r\n        console.log('Форма содержит ошибки клиентской валидации. Отправка на сервер отменена.');\r\n        return;\r\n      }\r\n\r\n      // Если клиентская валидация успешна, отправляем запрос на бэкенд\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/auth/login', { // URL вашего бэкенд API для входа\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ nickname: this.nickname, password: this.password })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) { // response.ok для статусов 2xx\r\n          console.log('Вход успешен:', data);\r\n          this.successMessage = data.message || 'Вход успешно выполнен!';\r\n\r\n          // Сохраняем токен и информацию о пользователе\r\n          localStorage.setItem('chatToken', data.token);\r\n          localStorage.setItem('chatUserId', data.userId);\r\n          localStorage.setItem('chatNickname', data.nickname);\r\n\r\n          this.nickname = '';\r\n          this.password = '';\r\n\r\n          // Перенаправляем пользователя на страницу чата\r\n          setTimeout(() => {\r\n            this.$router.push('/chat');\r\n          }, 1500);\r\n\r\n        } else {\r\n          console.error('Ошибка входа:', data);\r\n          this.generalError = data.message || 'Произошла ошибка при входе. Пожалуйста, попробуйте еще раз.';\r\n          // Ваш бэкенд возвращает 'Неверный никнейм или пароль.' для обоих случаев (пользователь не найден или пароль не совпадает)\r\n        }\r\n      } catch (error) {\r\n        console.error('Произошла ошибка сети или другое непредвиденное исключение:', error);\r\n        this.generalError = 'Не удалось подключиться к серверу. Проверьте ваше интернет-соединение или запустите сервер.';\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Ваши существующие стили */\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Abel&family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.login-wrapper {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: 'Abel', sans-serif;\r\n  padding: 20px;\r\n}\r\n\r\n.form-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.label {\r\n  color: white;\r\n  font-size: 1rem;\r\n  text-align: left;\r\n}\r\n\r\n.input {\r\n  background-color: transparent;\r\n  border: 1px solid #818182;\r\n  border-radius: 10px;\r\n  padding: 10px 15px;\r\n  color: #818182;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.full-width-link {\r\n  width: 100%;\r\n  display: block;\r\n  text-decoration: none;\r\n  color: inherit;\r\n}\r\n\r\n.btn {\r\n  background-color: #42566C;\r\n  color: #FFFF;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* НОВЫЕ СТИЛИ для сообщений об ошибках и успеха */\r\n.error-message {\r\n  color: #ff6b6b; /* Ярко-красный цвет для ошибок */\r\n  font-size: 0.8em;\r\n  margin-top: -10px; /* Поднимаем сообщение ближе к полю ввода */\r\n  min-height: 1.2em; /* Чтобы высота элемента не скакала, если нет ошибки */\r\n}\r\n\r\n.general-error {\r\n  text-align: center;\r\n  color: #ff6b6b;\r\n  margin-top: 5px; /* Небольшой отступ от кнопки */\r\n  font-weight: bold;\r\n}\r\n\r\n.success-message {\r\n  text-align: center;\r\n  color: #6bff96; /* Зеленый цвет для успешных сообщений */\r\n  margin-top: 5px; /* Небольшой отступ от кнопки */\r\n  font-weight: bold;\r\n}\r\n\r\n.link { /* Добавляем стиль для ссылки \"Don't have an account?\" */\r\n  color: #818182; /* Цвет, соответствующий вашему текущему стилю input */\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 0.9rem;\r\n  margin-top: 5px; /* Небольшой отступ */\r\n}\r\n\r\n.link:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}