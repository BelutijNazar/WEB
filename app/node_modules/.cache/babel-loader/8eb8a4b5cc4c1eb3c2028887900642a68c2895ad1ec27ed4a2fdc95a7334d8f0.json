{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatPage',\n  data() {\n    return {\n      message: '',\n      messages: [{\n        id: 1,\n        text: 'Привет! Как дела?',\n        isSent: false,\n        timestamp: new Date('2025-05-30T10:30:00')\n      }, {\n        id: 2,\n        text: 'Привет! Всё хорошо, спасибо 😊',\n        isSent: true,\n        timestamp: new Date('2025-05-31T12:05:00')\n      }, {\n        id: 3,\n        text: 'Чем занимаешься?',\n        isSent: false,\n        timestamp: new Date('2025-05-31T12:05:30')\n      }, {\n        id: 4,\n        text: 'Работаю над Vue проектом.',\n        isSent: true,\n        timestamp: new Date('2025-05-31T12:06:15')\n      }, {\n        id: 5,\n        text: 'Понятно.',\n        isSent: false,\n        timestamp: new Date('2025-05-31T12:06:45')\n      }, {\n        id: 6,\n        text: 'Как успехи?',\n        isSent: true,\n        timestamp: new Date()\n      }]\n    };\n  },\n  methods: {\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\n      if (!prevTimestamp) {\n        return true;\n      }\n      const current = new Date(currentTimestamp);\n      const prev = new Date(prevTimestamp);\n      if (current.toDateString() !== prev.toDateString()) {\n        return true;\n      }\n      const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\n      return diffMinutes >= 2 || current.getHours() !== prev.getHours();\n    },\n    formatTimestamp(timestamp) {\n      const now = new Date();\n      const messageDate = new Date(timestamp);\n      const isToday = now.toDateString() === messageDate.toDateString();\n      if (isToday) {\n        return messageDate.toLocaleTimeString('ru-RU', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } else {\n        const options = {\n          day: 'numeric',\n          month: 'short',\n          hour: '2-digit',\n          minute: '2-digit'\n        };\n        return messageDate.toLocaleDateString('ru-RU', options).replace(/\\./g, '').replace(',', '').trim();\n      }\n    },\n    sendMessage() {\n      if (this.message.trim() === '') {\n        return;\n      }\n      const newMessage = {\n        id: this.messages.length + 1,\n        text: this.message.trim(),\n        isSent: true,\n        timestamp: new Date()\n      };\n      this.messages.push(newMessage);\n      this.message = '';\n      this.$nextTick(() => {\n        const messagesContainer = this.$el.querySelector('.messages');\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","message","messages","id","text","isSent","timestamp","Date","methods","shouldShowTimestamp","currentTimestamp","prevTimestamp","current","prev","toDateString","diffMinutes","Math","abs","getTime","getHours","formatTimestamp","now","messageDate","isToday","toLocaleTimeString","hour","minute","options","day","month","toLocaleDateString","replace","trim","sendMessage","newMessage","length","push","$nextTick","messagesContainer","$el","querySelector","scrollTop","scrollHeight"],"sources":["D:\\Git\\WEB\\WEB\\app\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-page\">\r\n    <div class=\"header\"></div>\r\n\r\n    <div class=\"messages\">\r\n      <div v-for=\"(msg, index) in messages\" :key=\"msg.id\" class=\"message-group\">\r\n        <div\r\n          v-if=\"shouldShowTimestamp(msg.timestamp, index > 0 ? messages[index - 1].timestamp : null)\"\r\n          class=\"timestamp\"\r\n        >\r\n          {{ formatTimestamp(msg.timestamp) }}\r\n        </div>\r\n        <div :class=\"['message', msg.isSent ? 'message--sent' : 'message--received']\">\r\n          {{ msg.text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"input-area\">\r\n      <div class=\"input-wrapper\">\r\n        <input\r\n          v-model=\"message\"\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          class=\"message-input\"\r\n          @keyup.enter=\"sendMessage\"\r\n        />\r\n        <button class=\"send-button\" @click=\"sendMessage\"></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatPage',\r\n  data() {\r\n    return {\r\n      message: '', \r\n      messages: [ \r\n        { id: 1, text: 'Привет! Как дела?', isSent: false, timestamp: new Date('2025-05-30T10:30:00') }, \r\n        { id: 2, text: 'Привет! Всё хорошо, спасибо 😊', isSent: true, timestamp: new Date('2025-05-31T12:05:00') }, \r\n        { id: 3, text: 'Чем занимаешься?', isSent: false, timestamp: new Date('2025-05-31T12:05:30') }, \r\n        { id: 4, text: 'Работаю над Vue проектом.', isSent: true, timestamp: new Date('2025-05-31T12:06:15') }, \r\n        { id: 5, text: 'Понятно.', isSent: false, timestamp: new Date('2025-05-31T12:06:45') }, \r\n        { id: 6, text: 'Как успехи?', isSent: true, timestamp: new Date() },\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    shouldShowTimestamp(currentTimestamp, prevTimestamp) {\r\n      if (!prevTimestamp) {\r\n        return true;\r\n      }\r\n\r\n      const current = new Date(currentTimestamp);\r\n      const prev = new Date(prevTimestamp);\r\n\r\n      if (current.toDateString() !== prev.toDateString()) {\r\n        return true;\r\n      }\r\n\r\n      const diffMinutes = Math.abs(current.getTime() - prev.getTime()) / (1000 * 60);\r\n\r\n      return diffMinutes >= 2 || current.getHours() !== prev.getHours();\r\n    },\r\n\r\n    formatTimestamp(timestamp) {\r\n      const now = new Date();\r\n      const messageDate = new Date(timestamp);\r\n\r\n      const isToday = now.toDateString() === messageDate.toDateString();\r\n\r\n      if (isToday) {\r\n        return messageDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\r\n      } else {\r\n        const options = {\r\n          day: 'numeric',\r\n          month: 'short',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n        };\r\n        return messageDate.toLocaleDateString('ru-RU', options)\r\n                            .replace(/\\./g, '')\r\n                            .replace(',', '') \r\n                            .trim(); \r\n      }\r\n    },\r\n    sendMessage() {\r\n      if (this.message.trim() === '') {\r\n        return; \r\n      }\r\n\r\n      const newMessage = {\r\n        id: this.messages.length + 1,\r\n        text: this.message.trim(),\r\n        isSent: true,\r\n        timestamp: new Date(), \r\n      };\r\n\r\n      this.messages.push(newMessage);\r\n      this.message = '';\r\n      this.$nextTick(() => {\r\n        const messagesContainer = this.$el.querySelector('.messages');\r\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');\r\n\r\n.chat-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 100vh;\r\n  background-color: #292F3F;\r\n  font-family: 'Roboto', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.header {\r\n  height: 45px;\r\n  width: 100%;\r\n  background-color: #292F3F;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 10px 20px 120px;\r\n  box-sizing: border-box;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n\r\n.timestamp {\r\n  color: #ffff;\r\n  font-size: 0.75rem;\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 20px;\r\n  word-break: break-word;\r\n  font-size: 1rem;\r\n}\r\n\r\n.message--received {\r\n  background-color: #373E4E;\r\n  align-self: flex-start;\r\n  color: white;\r\n}\r\n\r\n.message--sent {\r\n  background-color: #272A35;\r\n  align-self: flex-end;\r\n  color: white;\r\n}\r\n\r\n.input-area {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 90%;\r\n  max-width: 1000px;\r\n  box-sizing: border-box;\r\n  background-color: #292F3F;\r\n  padding-top: 10px;\r\n}\r\n\r\n.input-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.message-input {\r\n  width: 100%;\r\n  height: 45px;\r\n  background-color: #272A35;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 0 50px 0 15px;\r\n  color: white;\r\n  font-size: 1rem;\r\n  font-family: 'Roboto', sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.send-button {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 35px;\r\n  height: 35px;\r\n  background-color: #373E4E;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-size: 1.1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0;\r\n  background-image: url('@/assets/speech-bubble.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: 20px 20px;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .message {\r\n    font-size: 0.95rem;\r\n  }\r\n\r\n  .message-input {\r\n    height: 40px;\r\n    font-size: 0.95rem;\r\n    padding-right: 45px;\r\n  }\r\n\r\n  .send-button {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 1rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}